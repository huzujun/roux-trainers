{"version":3,"sources":["lib/Defs.tsx","components/CubeSim.tsx","lib/Math.tsx","lib/CubeLib.tsx","components/CmllTrainerView.tsx","components/Config.tsx","Version.tsx","components/Select.tsx","components/BlockTrainerView.tsx","components/AppView.tsx","lib/Algs.tsx","lib/Pruner.tsx","lib/Solver.tsx","lib/CachedSolver.tsx","reducers/Reducer.tsx","theme.js","app/App.tsx","serviceWorker.js","index.js"],"names":["Face","Typ","U","D","F","B","L","R","C","E","T","corners_coord","edges_coord","u","cpc","coc","epc","eoc","tpc","name","f","r","l","d","b","m","e","s","u_face","f_face","color_map","defaultKeyMapping","TAU","Math","PI","axesInfo","THREE","cubeSim","width","height","colorScheme","mode","faces","stickers_tmpl","stickerwrap_tmpl","facesToReveal","scene","camera","renderer","antialias","alpha","enableBorder","geo","geo_border","setPixelRatio","window","devicePixelRatio","position","copy","lookAt","cubeG","add","updateWidthHeight","clearColor","canvas","domElement","setSize","setClearColor","aspect","updateProjectionMatrix","updateCube","cube","remove","i","cubie","rot","makeRotationFromEuler","rot1","setRotationFromMatrix","multiply","z","x","idx","curr_tmpl","sticker","clone","stickerwrap","indexOf","stickerhint","scale","set","drawCube","renderScene","render","cleanup","dispose","updateColorScheme","colorScheme_","materials","Array","fill","map","_","mat","color","side","alphaTest","mesh","setRotationFromEuler","materials_border","updateFacesToReveal","setup","CubeSim","props","mount","React","useRef","useEffect","dom","current","appendChild","bgColor","removeChild","ref","style","rand_int","floor","random","rand_incl","rand_choice","arr","length","getParity","perm","visited","follow","cnt","res","arrayEqual","arr1","arr2","CubieCube","id","cp","co","ep","eo","tp","apply_partial","o","p","oc","pc","mod","o_new","p_new","console","assert","src","dst","apply_one","move","toc","apply","isArray","from_move","Move","from_moves","moves","get_change","acc_p","acc_o","push","from_cube","make_rot_set","moveCost","Map","all_moves","us","fs","rs","ls","ds","bs","ms","es","ss","rw","rws","lw","lws","uw","uws","xs","y","ys","flat","moves_dict","Object","create","forEach","generate_base_moves","all","parse","str","tokens","token","ch","ord","charCodeAt","inv","slice","reverse","add_auf","auf_moves","auf_move","concat","to_string","join","evaluate","sum","get","FaceletCube","mult_move","face","face_new","work","typ","mod_for_typ","p1","p2","p_curr","o_curr","color_of_c","o1","o2","color_of_e","color_of_t","color_of_sticker","Error","d_face","l_face","r_face","b_face","from_cubie","mask","facelet","X","from_cubie_partial_masked","from_cubie_partial","to_unfolded_cube_str","faceletCube","face_count","str_face_map","color_cube","face_char","hasOwnProperty","count","lse_mask","CubeUtil","ext","stickers","find_pairs","edge_stickers","filter","corner_stickers","ep_stickers","cp_stickers","epcp_pairs","c","efs","cfs","match","get_color","connected_pairs","u_premove","m2_premove","get_random_with_mask","cp_rand","ep_rand","par","random_ori","ori_mask","ori","random_perm","perm_mask","undecided","j","tmp","rand_shuffle","ori_to_color_scheme","colorMap","valid_scheme_mapper","split","sel","is_cmll_solved","premove","cube1","solved","is_mask_solved","get_random_lse","is_cube_solved","Mask","fs_back_mask","fs_front_mask","fbdr_mask","fb_mask","sb_mask","cmll_mask","ss_front_mask","ss_back_mask","empty_mask","dl_solved_mask","db_solved_mask","solved_mask","useStyles","makeStyles","theme","container","paddingTop","spacing","paddingBottom","paper","padding","display","overflow","flexDirection","fixedHeight","canvasPaper","title","flexGrow","SelectorGroupPanel","selector","handleChange","FormGroup","row","names","checked","FormControlLabel","control","Checkbox","onChange","label","key","makeBox","flags","CmllTrainerView","state","dispatch","config","classes","clsx","handleSelectorChange","useCallback","selectorSel","new_flags","new_config","type","content","Container","maxWidth","className","Grid","justify","alignItems","item","md","lg","Paper","Box","margin","cmllSelector","cmllAufSelector","triggerSelector","orientationSelector","getActiveNames","ans","getActiveName","initialConfig","arr_ori_flag","kind","fbdrSelector","fbOnlySelector","fbPairSolvedSelector","ssSelector","ssPairOnlySelector","solutionNumSelector","fbPieceSolvedSelector","configManager","cache","getConfig","localStorage","getItem","vers","undefined","setItem","JSON","stringify","item1","keys","item2","setConfig","partial","newConfig","assign","backgroundColor","palette","background","default","button","infoColumn","scrambleColumn","paddingLeft","textColumn","breakpoints","up","minHeight","select","text","primary","selectLabel","secondary","SingleSelect","radioValue","FormControl","component","FormLabel","RadioGroup","aria-label","value","evt","n","target","Radio","labelPlacement","MultiSelect","log","useState","open","setOpen","handleClose","Button","variant","borderWidth","onClick","fontSize","marginLeft","marginRight","Dialog","disableBackdropClick","disableEscapeKeyDown","onClose","DialogTitle","DialogContent","DialogActions","hint","fontWeight","borderBottom","ConfigPanelGroup","BlockTrainerView","case","desc","getMask","alg","alt_algs","spaceButtonText","algs","minMove","a","reduce","min","algText","useTheme","simBackground","elevation","sm","lineHeight","Typography","whiteSpace","onFocus","blur","size","Divider","TabPanel","children","index","other","role","hidden","aria-labelledby","page","icon","minWidth","AppView","newValue","modes","setValue","handleInfoClose","dividers","gutterBottom","AppBar","Tabs","scrollButtons","indicatorColor","Tab","theme_flag","empty_alg","cmll_algs","trigger_algs","u_auf_algs","ori_algs","alg_generator","algSet","lookup_algset","lookup","Set","get_active_names","prefix","has","Pruner","dist","encode","solved_states","max_depth","moveset","initialized","init","Uint8Array","frontier","total_expanded","new_frontier","newState","query","equal","cube2","fbdrPrunerConfig","pow","c1","c2","enc_c","e1","e2","e3","e4","fbPrunerConfig","enc_ce","t1","Solver","accum","min_depth","SState","MAX_STATE_COUNT","is_solved","pruners","state_count","prune_count","solve_depth","min_depth_","max_depth_","accum_","search","moveTable","depth","solution","STOP","CONTINUE","solutions","capacity","flag","sol","try_push","availableMoves","seen_encodings","new_cube","enc","st","pop","expand","getAvailableMove","k","base","prepareNextMoveTable","solve","depth_l","depth_r","getPruner","FbdrSolver","prunerConfig","pruner","FbSolver","SsSolver","is_front","v","ssPrunerConfig","CachedSolver","getInitialState","initialStateName","history","reducer","action","code","stateM","StateM","reduceKey","conf","reactToConfig","this","nextStateName","FbdrStateM","SsStateM","FbStateM","SolvingStateM","SolvedStateM","BlockTrainerStateM","solverL","solverR","update","getRandom","solverName","solver","scramble","solutionCap","sort","oriSel","algdesc","updateScramble","movestr","m_premove","pairPos","fbOnly","pairSolved","active","get_pair_solved_front","get_random_fs_back","get_random_fs_front","get_random_fb","centers","includes","pairs","cc_edges","find_center_connected_edges","get_random","CmllStateM","generator","trig_generator","u_auf_generator","ori_generator","trigger_alg","u_auf_alg","alg_str","createMuiTheme","main","error","red","A400","themeDark","addEventListener","keyCode","document","body","preventDefault","App","useReducer","downHandler","toUpperCase","removeEventListener","appTheme","ThemeProvider","CssBaseline","Boolean","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23ddaa9e.chunk.js","sourcesContent":["export enum Face {\n    U = 0, D, F, B, L, R, X\n}\nconst U = Face.U;\nconst D = Face.D;\nconst F = Face.F;\nconst B = Face.B;\nconst L = Face.L;\nconst R = Face.R;\nexport {U, D, F, B, L, R};\n\nexport enum Typ {\n    C = 0, E, T\n}\nconst C = Typ.C;\nconst E = Typ.E;\nconst T = Typ.T;\nexport {C, E, T}\n\nexport type CubieT = {\n    co: Array<number>,\n    cp: Array<number>,\n    eo: Array<number>,\n    ep: Array<number>,\n    tp: Array<number>\n}\n\nexport type FaceletCube = Array<string>\n\nexport type CornerCoord = [Face, Face, Face]\nlet corners_coord : Array<CornerCoord> = [\n    [U,F,L], [U,L,B], [U,B,R], [U,R,F],\n    [D,L,F], [D,B,L], [D,R,B], [D,F,R]\n]\n\nexport type EdgeCoord = [Face, Face]\nlet edges_coord : Array<EdgeCoord> = [\n    [U,F], [U,L], [U,B], [U,R],\n    [D,F], [D,L], [D,B], [D,R],\n    [F,L], [B,L], [B,R], [F,R],\n]\nexport {corners_coord, edges_coord}\n\nexport type PermChg = [number, number]\nexport type OriChg = number\n\nexport type MoveT = {\n    cpc: Array<PermChg>,\n    coc: Array<OriChg>,\n    epc: Array<PermChg>,\n    eoc: Array<OriChg>,\n    tpc: Array<PermChg>,\n    name: string\n}\n\nlet u : MoveT = {\n    cpc: [[0, 1], [1, 2], [2, 3], [3, 0]],\n    coc: [0, 0, 0, 0],\n    epc: [[0, 1], [1, 2], [2, 3], [3, 0]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"U\"\n}\n\nlet f : MoveT = {\n    cpc: [[0, 3], [3, 7], [7, 4], [4, 0]],\n    coc: [1, 2, 1, 2],\n    epc: [[0, 11], [11, 4], [4, 8], [8, 0]],\n    eoc: [1, 1, 1, 1],\n    tpc: [],\n    name: \"F\",\n}\n\nlet r : MoveT = {\n    cpc: [[3, 2], [2, 6], [6, 7], [7, 3]],\n    coc: [1, 2, 1, 2],\n    epc: [[3, 10], [10, 7], [7, 11], [11, 3]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"R\",\n}\n\nlet l : MoveT = {\n    cpc: [[0, 4], [4, 5], [5, 1], [1, 0]],\n    coc: [2, 1, 2, 1],\n    epc: [[1, 8], [8, 5], [5, 9], [9, 1]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"L\",\n}\n\nlet d : MoveT = {\n    cpc: [[4, 7], [7, 6], [6, 5], [5, 4]],\n    coc: [0, 0, 0, 0],\n    epc: [[4, 7], [7, 6], [6, 5], [5, 4]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"D\",\n}\n\nlet b : MoveT = {\n    cpc: [[1, 5], [5, 6], [6, 2], [2, 1]],\n    coc: [2, 1, 2, 1],\n    epc: [[2, 9], [9, 6], [6, 10], [10, 2]],\n    eoc: [1, 1, 1, 1],\n    tpc: [],\n    name: \"B\",\n}\n\nlet m : MoveT = {\n    cpc: [],\n    coc: [],\n    epc: [[0, 4], [4, 6], [6, 2], [2, 0]],\n    eoc: [1, 1, 1, 1],\n    tpc: [[0, 2], [2, 1], [1, 3], [3, 0]],\n    name: \"M\",\n}\n\nlet e : MoveT = {\n    cpc: [],\n    coc: [],\n    epc: [[8, 9], [9, 10], [10, 11], [11, 8]],\n    eoc: [1, 1, 1, 1],\n    tpc: [[2, 4], [4, 3], [3, 5], [5, 2]],\n    name: \"E\",\n}\n\nlet s : MoveT = {\n    cpc: [],\n    coc: [],\n    epc: [[1, 3], [3, 7], [7, 5], [5, 1]],\n    eoc: [1, 1, 1, 1],\n    tpc: [[0, 5], [5, 1], [1, 4], [4, 0] ],\n    name: \"S\",\n}\n\nexport {u, d, f, b, l, r, m, e, s}\n\nexport type StickerT = [number, number, Typ]\nexport type StickerExtT = [number, number, Typ, Face]\nexport type FaceletT = Array<StickerT>\n\nlet u_face : FaceletT = [\n    [1, 0, C], [2, 0, E], [2, 0, C],\n    [1, 0, E], [0, 0, T], [3, 0, E],\n    [0, 0, C], [0, 0, E], [3, 0, C]\n  ]\n\nlet f_face : FaceletT = [\n    [0, 1, C], [0, 1, E], [3, 2, C],\n    [8, 0, E], [2, 0, T], [11,0, E],\n    [4, 2, C], [4, 1, E], [7, 1, C]\n]\n\nexport {u_face, f_face}\n\nexport type FaceletCubeT = Array<Array<Face>>\n\n// A Cube can be in two representations: cubieCube or faceletCube\n\nlet color_map =`\\\n   UUU\n   UUU\n   UUU\nLLLFFFRRRBBB\nLLLFFFRRRBBB\nLLLFFFRRRBBB\n   DDD\n   DDD\n   DDD`\n\nexport {color_map}\n\nconst defaultKeyMapping : { [key: string]: string } = {\n    \"I\": \"R\",\n    \"K\": \"R'\",\n    \"W\": \"B\",\n    \"O\": \"B'\",\n    \"S\": \"D\",\n    \"L\": \"D'\",\n    \"D\": \"L\",\n    \"E\": \"L'\",\n    \"J\": \"U\",\n    \"F\": \"U'\",\n    \"H\": \"F\",\n    \"G\": \"F'\",\n    \";\": \"y\",\n    \"A\": \"y'\",\n    \"U\": \"r\",\n    \"R\": \"l'\",\n    \"M\": \"r'\",\n    \"V\": \"l\",\n    \"T\": \"x\",\n    \"Y\": \"x\",\n    \"N\": \"x'\",\n    \"B\": \"x'\",\n    \".\": \"M'\",\n    \"X\": \"M'\",\n    \"5\": \"M\",\n    \"6\": \"M\",\n    \"P\": \"z\",\n    \"Q\": \"z'\",\n    \"Z\": \"d\",\n    \"C\": \"u'\",\n    \",\": \"u\",\n    \"/\": \"d'\",\n    \"ENTER\": \"#enter\",\n    \" \": \"#space\",\n  }\n\nexport {defaultKeyMapping}","import React, { useEffect } from 'react'\n\nimport { FaceletCubeT, Face } from \"../lib/Defs\";\nimport * as THREE from 'three';\nimport { useTheme } from '@material-ui/core';\nimport { getConfig } from './Config';\n\ntype Config = {cube: FaceletCubeT, width: number, height: number, colorScheme: Array<number>, facesToReveal: Face[],\n    bgColor?: string}\n\n/*\nHow to propagate control of keypress ..? maybe not here, in the app.\n\nLet's look at click analogy: if a user click on sub-component,\nthat message should be propagated upwards to the parent.\n\nThat is, \"keydown\" should transform to some kind of message, e.g. the resulting cube state\nto be passed to the App, which then decides whether to trigger state change or let the cube keep being solved\n\n*/\n\n\ntype AxesInfo = [THREE.Vector3, THREE.Euler]\nconst TAU = Math.PI * 2;\nconst axesInfo : [THREE.Vector3, THREE.Euler][] = [\n    [new THREE.Vector3( 0,  1,  0), new THREE.Euler(-TAU/4,  0,  0)],\n    [new THREE.Vector3( 0, -1,  0), new THREE.Euler( TAU/4,  0,  0)],\n    [new THREE.Vector3( 0,  0,  1), new THREE.Euler( 0,  0,      0)],\n    [new THREE.Vector3( 0,  0, -1), new THREE.Euler( 0,  TAU/2,  0)],\n    [new THREE.Vector3(-1,  0,  0), new THREE.Euler( 0, -TAU/4,  0)],\n    [new THREE.Vector3( 1,  0,  0), new THREE.Euler( 0,  TAU/4,  0)],\n];\n\nconst setup = function(width: number, height: number, colorScheme?: Array<number>, mode?: string,\n    faces?: Face[]) {\n    let facesToReveal = faces || [Face.L, Face.B, Face.D]\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(70, width / height, 0.1, 1000)\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const mag = 1.0\n    const alpha = 0.5\n    const enableBorder = true\n    const geo = new THREE.PlaneGeometry(0.89 * mag * 2, 0.89 * mag * 2)\n    const geo_border = new THREE.PlaneGeometry(1.0 * mag * 2, 1.0 * mag * 2)\n    //const geo_border = new THREE.EdgesGeometry(geo_border_0)\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    //let colorScheme_ = colorScheme || [0xffffff, 0xffff00,  0x00ff00, 0x0000ff, 0xff8800, 0xff0000]\n\n    mode = mode || \"FRU\"\n\n    if (mode === \"FRU\")\n        camera.position.copy(new THREE.Vector3(2.6 / 1.1, 3/1.1, 3/1.1))\n    else\n        camera.position.copy(new THREE.Vector3(0 / 1.1, 3/1.1, 3/1.1))\n\n    //camera.position.copy(new THREE.Vector3(2.5, 5, 5))\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n\n\n    let stickers_tmpl: THREE.Mesh[] , stickerwrap_tmpl: THREE.Mesh\n\n    function updateFacesToReveal(faces: Face[]) {\n        facesToReveal = faces\n    }\n    function updateColorScheme(colorScheme: Array<number>) {\n        let colorScheme_ = colorScheme\n        //console.log(\"update color scheme \", colorScheme_)\n        let materials = Array(7).fill(0).map( (_, i) => {\n            let mat = new THREE.MeshBasicMaterial({ color: colorScheme_[i], side:THREE.DoubleSide});\n            mat.alphaTest = alpha;\n            return mat\n         })\n\n        stickers_tmpl = materials.map( (mat) => {\n            let mesh = new THREE.Mesh(geo, mat)\n            mesh.setRotationFromEuler(axesInfo[0][1])\n            return mesh\n        })\n\n        let materials_border = new THREE.MeshBasicMaterial({ color: 0x000000, side:THREE.FrontSide })\n        stickerwrap_tmpl = (() => {\n            let mesh = new THREE.Mesh(geo_border, materials_border)\n            mesh.setRotationFromEuler(axesInfo[0][1])\n            return mesh\n        })()\n    }\n\n    function drawCube(faces: FaceletCubeT) : THREE.Group {\n        const cube = new THREE.Group();\n        for (let i = 0; i < 6; i++) {\n            const cubie = new THREE.Group();\n            const rot = new THREE.Matrix4().makeRotationFromEuler(axesInfo[i][1]);\n            const rot1 = new THREE.Matrix4().makeRotationFromEuler(axesInfo[1][1]);\n            cubie.setRotationFromMatrix(rot.multiply(rot1))\n            for (let z = -1; z <= 1; z++) {\n                for (let x = -1; x <= 1; x++) {\n                    let idx = (z + 1) * 3 + (x + 1)\n\n                    const curr_tmpl = stickers_tmpl[faces[i][idx]]\n                    const sticker = curr_tmpl.clone()\n                    const stickerwrap = stickerwrap_tmpl.clone()\n\n                    const eps = 0.05\n                    sticker.position.copy(new THREE.Vector3(x * 2, 3, z * 2))\n                    stickerwrap.position.copy(new THREE.Vector3(x * 2, 3 - eps, z * 2))\n\n                    if (facesToReveal.indexOf(i) > -1) { // (i === 5 && mode === \"UF\")) {\n                        const stickerhint = curr_tmpl.clone()\n                        stickerhint.position.copy(new THREE.Vector3(x * 2, 3 + 7 + 3, z * 2))\n                        cubie.add(stickerhint)\n\n                    }\n                    if (enableBorder)\n                        cubie.add(stickerwrap)\n\n                    cubie.add(sticker)\n                }\n\n            }\n            cube.add(cubie)\n        }\n        cube.scale.set(1/3, 1/3, 1/3)\n        return cube\n    }\n\n    let cubeG = new THREE.Group();\n    scene.add(cubeG)\n    const updateCube = (cube: FaceletCubeT) => {\n        scene.remove(cubeG)\n        cubeG = drawCube(cube)\n        scene.add(cubeG)\n    }\n\n    const renderScene = () => {\n        renderer.render(scene, camera)\n    }\n\n    const updateWidthHeight = (width: number, height: number, clearColor?: string) => {\n        const canvas = renderer.domElement;\n        const needResize = canvas.width !== width || canvas.height !== height;\n        if (needResize) {\n            renderer.setSize(width, height, true);\n            clearColor = clearColor || '#eeeeef';\n            //renderer.setViewport( 0, 0, width * window.devicePixelRatio, height * window.devicePixelRatio);\n            renderer.setClearColor(clearColor) // #70788a') //#5a606e') // '#373B43') // '#eeeeee')\n            camera.aspect = width / height;\n            camera.updateProjectionMatrix();\n        }\n    }\n\n\n    const cleanup = () => {\n        geo.dispose()\n        //materials.forEach(m => m.dispose())\n    }\n\n    //let defaultColorScheme = [ 0x00ff00, 0x0000ff, 0xff0000,0xff8800,0xffff00, 0xffffff]\n    updateWidthHeight(width, height)\n    //updateColorScheme(defaultColorScheme)\n    //updateCube(FaceletCube.from_cubie( CubieCube.id))\n\n\n    return {\n        domElement: () => {return renderer.domElement},\n        updateCube,\n        renderScene,\n        updateWidthHeight,\n        cleanup,\n        updateColorScheme,\n        updateFacesToReveal\n    }\n}\n\nlet cubeSim = setup(370, 370)\n\nfunction CubeSim(props: Config) {\n  const mount = React.useRef<HTMLDivElement | null>(null)\n  let { width, height } = props\n\n  useEffect( () => {\n    let dom = cubeSim.domElement()\n    let current = mount.current!\n\n    current.appendChild(dom)\n    cubeSim.updateFacesToReveal( props.facesToReveal )\n    cubeSim.updateWidthHeight( width, height, props.bgColor || \"#eeeeef\" )\n    cubeSim.updateColorScheme(props.colorScheme)\n    cubeSim.updateCube(props.cube)\n    cubeSim.renderScene()\n\n    return () => {\n        current.removeChild( dom )\n    }\n  } )\n\n  return <div\n      ref = {mount}\n      style = {{width : props.width, height : props.height}}\n  />;\n}\n\nexport default CubeSim","let rand_int = (r: number) => {\n    return Math.floor(Math.random() * r)\n}\n\nlet rand_incl = (l: number, r: number) => {\n    return rand_int(r - l + 1) + l;\n}\nlet rand_choice = function<T>(arr: T[]) {\n    return arr[rand_int(arr.length)]\n}\n\nlet rand_shuffle = function<T>(arr: T[]) {\n    for (let i = 0, l = arr.length; i < l - 1; i++) {\n        let j = rand_incl(i, l - 1)\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp\n    }\n    return arr\n}\n\nlet getParity = (perm: number[]) => {\n    let visited = Array(perm.length).fill(false)\n    let follow = (i: number, cnt: number) : number => {\n        if (visited[i]) {\n            return 0\n        } else {\n            visited[i] = 1\n            return follow(perm[i], cnt + 1)\n        }\n    }\n    let res = 0\n    for (let x of perm) {\n        res += follow(x, 0)\n    }\n    return res\n}\n\nlet arrayEqual = function<T>(arr1: T[], arr2: T[]) {\n    if (arr1.length !== arr2.length) return false;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\n\nlet encodeArr = function(base: number, rarr: number[]) {\n    let int = 0\n    for (let i = rarr.length - 1; i >= 0; i--)\n        int = rarr[i] + int * base\n    return int\n}\n\nexport {rand_int, rand_choice, rand_shuffle, getParity, arrayEqual, encodeArr}","import { MoveT, CubieT, OriChg, PermChg, StickerT, StickerExtT } from \"./Defs\";\nimport { u, d, f, b, l, r, m, e, s} from \"./Defs\";\nimport { FaceletT, FaceletCubeT, corners_coord, edges_coord, u_face, f_face, color_map } from \"./Defs\";\nimport { Typ, Face, C, E, T, U, D, F, B, L, R } from \"./Defs\";\nimport { rand_int, rand_shuffle, getParity, rand_choice, arrayEqual } from \"./Math\";\n\nconst C_MOD = 3;\nconst E_MOD = 2;\nconst T_MOD = 1;\n\nlet CubieCube = (function () {\n    /*\n    Cube should be represented as a simple struct {cp, eo, ep, eo, tp}.\n    The addition of tp is not necessary, but helps us deal with slice moves in Roux during search and simcube.\n    */\n\n    /*\n    We will follow the programming pattern of returning an object with all the public functions.\n    These functions will mostly have no side effects, i.e. no 'this' will be used. instead, the object must pass itself\n    in as the first argument. This makes sense because cube moves usually changes the state representation by a lot,\n    and re-assigning the result to 'this' would be cumbersome.\n    */\n    let id: CubieT = {\n        // init state\n        cp: [0, 1, 2, 3, 4, 5, 6, 7],\n        co: [0, 0, 0, 0, 0, 0, 0, 0],\n        ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        tp: [0, 1, 2, 3, 4, 5] // UD FB LR\n    }\n\n    let apply_partial = (o: Array<number>, p: Array<number>, oc: Array<OriChg>, pc: Array<PermChg>, mod: number) => {\n        let o_new = [...o];\n        let p_new = [...p];\n        console.assert(oc.length === pc.length)\n\n        for (let i = 0; i < oc.length; i++) {\n            //let [src, dst] = pc[i];\n            let src = pc[i][0], dst = pc[i][1];\n            p_new[dst] = p[src];\n            o_new[dst] = (o[src] + oc[i]) % mod;\n        }\n        return [o_new, p_new]\n    }\n\n    let apply_one = (cube: CubieT, move: MoveT) => {\n        let [co, cp] = apply_partial(cube.co, cube.cp, move.coc, move.cpc, C_MOD)\n        let [eo, ep] = apply_partial(cube.eo, cube.ep, move.eoc, move.epc, E_MOD)\n        let toc = Array(move.tpc.length).fill(0)\n        let [, tp] = apply_partial([0, 0, 0, 0, 0, 0], cube.tp, toc, move.tpc, T_MOD)\n        return ({ co, cp, eo, ep, tp })\n    }\n\n    let apply = (cube: CubieT, move: MoveT | Array<MoveT>) => {\n        if (Array.isArray(move)) {\n            for (let i = 0; i < move.length; i++) {\n                cube = apply_one(cube, move[i])\n            }\n            return cube\n        } else {\n            return apply_one(cube, move)\n        }\n    }\n\n    let from_move = (move: MoveT | Array<MoveT>) => {\n        return apply(id, move)\n    }\n\n\n    return {\n        id,\n        apply,\n        from_move\n    }\n\n})()\n\n\n/* Moves */\n/* We will generate all the moves based on the base moves and rotations, and return them in an array */\nlet Move = function () {\n    let from_cube = (cube: CubieT, name: string): MoveT => {\n        let get_change = (p: Array<number>, o: Array<number>, acc_p: Array<PermChg>, acc_o: Array<OriChg>) => {\n            for (let i = 0; i < p.length; i++) {\n                if (i === p[i] && o[i] === 0) {\n                } else {\n                    acc_p.push([p[i], i]);\n                    acc_o.push(o[i]);\n                }\n            }\n        }\n        let cpc: Array<PermChg> = [];\n        let coc: Array<OriChg> = [];\n        let epc: Array<PermChg> = [];\n        let eoc: Array<OriChg> = [];\n        let tpc: Array<PermChg> = [];\n        get_change(cube.cp, cube.co, cpc, coc);\n        get_change(cube.ep, cube.eo, epc, eoc);\n        get_change(cube.tp, [0, 0, 0, 0, 0, 0], tpc, []);\n        return {\n            cpc, coc, epc, eoc, tpc, name\n        }\n    }\n    let from_moves = (moves: Array<MoveT>, name: string): MoveT => {\n        let move = from_cube(CubieCube.apply(CubieCube.id, moves), name)\n        return move\n    }\n    let make_rot_set = (move: MoveT): Array<MoveT> => {\n        return [move,\n            from_moves([move, move], move.name + \"2\"),\n            from_moves([move, move, move], move.name + \"'\")\n        ]\n    }\n    let add_auf = (moves: Array<MoveT>, auf_moves?: Array<MoveT | MoveT[]>): MoveT[] => {\n        auf_moves = auf_moves || [[], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"]]\n        let auf_move = auf_moves[Math.floor(Math.random() * auf_moves.length)]\n        if (Array.isArray(auf_move)) {\n            return moves.concat(auf_move)\n        } else {\n            moves.push(auf_move)\n            return moves\n        }\n    }\n\n    let generate_base_moves = () => {\n        let us = make_rot_set(u);\n        let fs = make_rot_set(f)\n        let rs = make_rot_set(r)\n        let ls = make_rot_set(l)\n        let ds = make_rot_set(d)\n        let bs = make_rot_set(b)\n        let ms = make_rot_set(m)\n        let es = make_rot_set(e);\n        let ss = make_rot_set(s);\n\n        let rw = from_moves([r, ms[2]], \"r\")\n        let rws = make_rot_set(rw)\n        let lw = from_moves([l, m], \"l\")\n        let lws = make_rot_set(lw)\n        let uw = from_moves([u, e], \"u\")\n        let uws = make_rot_set(uw)\n\n        let x = from_moves([r, ls[2], ms[2]], \"x\")\n        let xs = make_rot_set(x)\n        let y = from_moves([u, e, ds[2]], \"y\")\n        let ys = make_rot_set(y)\n        let z = from_moves([x, y, x, x, x], \"z\")\n        let zs = make_rot_set(z)\n        let moves = [\n            us, fs, rs, ls, ds, bs, ms, es, ss,\n            xs, ys, zs,\n            rws, lws, uws\n        ].flat()\n        let moves_dict: { [key: string]: MoveT } = Object.create({})\n        moves.forEach(m => moves_dict[m.name] = m)\n        return moves_dict\n    }\n\n    const moveCost = function() {\n        let pairs : [string, number][]= [\n            [\"U\", 1], [\"U'\", 1], [\"U2\", 1.4],\n            [\"R\", 1], [\"R'\", 1], [\"R2\", 1.4],\n            [\"r\", 1], [\"r'\", 1], [\"r2\", 1.5],\n            [\"L\", 1], [\"L'\", 1], [\"L2\", 1.4],\n            [\"F\", 1.4], [\"F'\", 1.4], [\"F2\", 1.8],\n            [\"B\", 1.6], [\"B'\", 1.6], [\"B2\", 2.2],\n            [\"D\", 1.4], [\"D'\", 1.4], [\"D2\", 1.7],\n            [\"M\", 1.5], [\"M'\", 1.2], [\"M2\", 1.8],\n            [\"S\", 1.7], [\"S'\", 1.7], [\"S2\", 3.0],\n            [\"E\", 1.5], [\"E'\", 1.5], [\"E2\", 2.4],\n        ]\n        let costMap = new Map(pairs)\n        return costMap\n    }()\n    function evaluate(moves : MoveT[]) {\n        let sum = 0\n        for (let m of moves) {\n            const value = (moveCost.get(m.name)) || 1.4\n            sum += value\n        }\n        return sum\n    }\n\n    let all_moves = generate_base_moves()\n    let parse = (str: string) => {\n        let tokens = []\n        let token = \"\"\n        for (let i = 0; i < str.length; i++) {\n            let ch = str[i]\n            if (ch === '2' || ch === '\\'') {\n                token += str[i]; tokens.push(token)\n                token = \"\";\n            } else if (ch === ' ') {\n                if (token.length > 0) tokens.push(token); token = \"\";\n            } else {\n                const ord = ch.charCodeAt(0)\n                if ( (65 <= ord && ord < 65 + 26) || (97 <= ord && ord < 97 + 26)) {\n                    if (token.length > 0) {\n                        tokens.push(token)\n                        token = \"\"\n                    }\n                    token += str[i]\n                }\n            }\n        }\n        if (token.length > 0) tokens.push(token);\n\n        let res: MoveT[] = []\n        for (let token of tokens) {\n            let move = all_moves[token]\n            if (move) {\n                res.push(move)\n            } else {\n                return []\n                //throw Error(\"Invalid move sequence \" + move)\n            }\n        }\n        return res\n    }\n\n    let inv = (move: MoveT | MoveT[]): MoveT[] => {\n        if (Array.isArray(move)) {\n            return move.slice(0).reverse().map(inv).flat()\n        } else {\n            let name: string\n            switch (move.name[move.name.length - 1]) {\n                case \"'\": name = move.name.slice(0, move.name.length - 1); break\n                case \"2\": name = move.name; break\n                default: name = move.name + \"'\"\n            }\n            return [all_moves[name]]\n        }\n    }\n\n    let to_string = (move: MoveT | MoveT[]): string => {\n        if (Array.isArray(move)) {\n            return move.map(to_string).join(\" \") + \" \"\n        } else {\n            return move.name\n        }\n    }\n\n    return {\n        all: all_moves,\n        parse: parse,\n        inv: inv,\n        add_auf: add_auf,\n        to_string: to_string,\n        from_moves,\n        evaluate\n    }\n}()\n\n/* Faces */\nlet FaceletCube = function () {\n    let mult_move = (face: FaceletT, move: MoveT): FaceletT => {\n        let face_new: FaceletT = [...face]\n        let mod_for_typ = (typ: Typ) => {\n            switch (typ) {\n                case C: return 3;\n                case E: return 2;\n                case T: return 1\n            }\n        }\n        let work = (p: PermChg, o: number, typ: Typ) => {\n            let mod = mod_for_typ(typ)\n            let [p1, p2] = p\n            for (let i = 0; i < face.length; i++) {\n                let [p_curr, o_curr, typ_curr] = face[i];\n                if (typ_curr === typ && p_curr === p1) {\n                    face_new[i] = [p2, (o_curr + o) % mod, typ]\n                }\n            }\n        }\n        for (let i = 0; i < move.cpc.length; i++) {\n            work(move.cpc[i], move.coc[i], C)\n        }\n        for (let i = 0; i < move.epc.length; i++) {\n            work(move.epc[i], move.eoc[i], E)\n        }\n        for (let i = 0; i < move.tpc.length; i++) {\n            work(move.tpc[i], 0, T)\n        }\n        return face_new\n    }\n    let color_of_c = (p: number, o1: number, o2: number) =>\n    corners_coord[p][(3 - o1 + o2) % 3];\n    let color_of_e = (p: number, o1: number, o2: number) =>\n        edges_coord[p][(2 - o1 + o2) % 2];\n    let color_of_t = (p: number) => [U, D, F, B, L, R][p]\n\n    let color_of_sticker = (cube: CubieT, sticker: StickerT) => {\n        let [p, o, typ] = sticker\n        if (typ === C) {\n            return color_of_c(cube.cp[p], cube.co[p], o)\n        } else if (typ === E) {\n            return color_of_e(cube.ep[p], cube.eo[p], o)\n        } else if (typ === T) {\n            return color_of_t(cube.tp[p])\n        } else {\n            throw Error(\"unidentified type \" + typ)\n        }\n    }\n\n    let from_cubie_partial = (cube: CubieT, facelet: FaceletT) => {\n        return facelet.map(s => color_of_sticker(cube, s))\n    }\n    let from_cubie_partial_masked = (cube: CubieT, facelet: FaceletT, mask: Mask) => {\n        return facelet.map(([p, o, typ]) => {\n            if (typ === C) {\n                if (mask.cp[cube.cp[p]] === 1)\n                    return color_of_c(cube.cp[p], cube.co[p], o)\n                else\n                    return Face.X\n            } else if (typ === E) {\n                if (mask.ep[cube.ep[p]] === 1)\n                    return color_of_e(cube.ep[p], cube.eo[p], o)\n                else\n                    return Face.X\n            } else if (typ === T) {\n                if (mask.tp && mask.tp[cube.tp[p]] === 0)\n                    return Face.X\n                else\n                    return color_of_t(cube.tp[p])\n            } else {\n                throw Error(\"unidentified type \" + typ)\n            }\n        })\n    }\n\n    let moves = Move.all\n    let generate_base_facelets = () => {\n        let d_face = mult_move(f_face, moves[\"x'\"])\n        let l_face = mult_move(f_face, moves[\"y\"])\n        let r_face = mult_move(f_face, moves[\"y'\"])\n        let b_face = mult_move(f_face, moves[\"y2\"])\n        return {\n            d_face, l_face, r_face, b_face\n        }\n    }\n    let { d_face, l_face, r_face, b_face } = generate_base_facelets()\n\n    let from_cubie = (cube: CubieT, mask?: Mask): FaceletCubeT => {\n        //console.log(\"converting from cube\", cube)\n        let faces = [u_face, d_face, f_face, b_face, l_face, r_face]\n        if (mask)\n            return faces.map((facelet) => from_cubie_partial_masked(cube, facelet, mask))\n        else\n            return faces.map((facelet) => from_cubie_partial(cube, facelet))\n    }\n\n    let to_unfolded_cube_str = (faceletCube: FaceletCubeT): String => {\n        let face_count = [0, 0, 0, 0, 0, 0];\n        let str_face_map: { [key: string]: Face } = {\n            \"U\": U, \"D\": D, \"F\": F, \"B\": B, \"L\": L, \"R\": R\n        }\n        let face_str_map = \"UDFBLR\"\n        let color_cube = \"\"\n        for (let i = 0; i < color_map.length; i++) {\n            let face_char = color_map[i];\n            if (str_face_map.hasOwnProperty(face_char)) {\n                let face: number = str_face_map[face_char] as number;\n                let count = face_count[face];\n                let color = faceletCube[face][count]\n                color_cube += face_str_map[color]\n                face_count[face] += 1;\n            } else {\n                color_cube += color_map[i];\n            }\n        }\n        return color_cube;\n    }\n\n    return {\n        from_cubie,\n        to_unfolded_cube_str,\n        color_of_sticker,\n        faces: {\n            u_face, d_face, l_face, r_face, f_face, b_face\n        }\n    }\n}()\n\ntype Mask = {\n    co?: number[],\n    eo?: number[],\n    tp?: number[],\n    cp: number[],\n    ep: number[],\n}\nfunction mask_copy (m: Mask) {\n    return {\n        co: m.co && [...m.co],\n        eo: m.eo && [...m.eo],\n        tp: m.tp && [...m.tp],\n        cp: [...m.cp],\n        ep: [...m.ep]\n    }\n}\n\nconst lse_mask: Mask = {\n    cp: [1, 1, 1, 1, 1, 1, 1, 1],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],\n}\n\nconst solved_mask : Mask = {\n    cp: [1, 1, 1, 1,  1, 1, 1, 1],\n    ep:[1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1],\n}\nconst empty_mask : Mask = {\n    cp: [0, 0, 0, 0, 0, 0, 0, 0],\n    ep: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n}\nconst dl_solved_mask : Mask = {\n    cp: [0, 0, 0, 0, 0, 0, 0, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n}\nconst db_solved_mask : Mask = {\n    cp: [0, 0, 0, 0, 0, 0, 0, 0],\n    ep: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\n}\nconst fs_back_mask: Mask = {\n    cp: [0, 0, 0, 0, 0, 1, 0, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]\n}\nconst fs_front_mask: Mask = {\n    cp: [0, 0, 0, 0, 1, 0, 0, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]\n}\nconst fb_mask: Mask = {\n    cp: [0, 0, 0, 0, 1, 1, 0, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n    tp: [0, 0, 0, 0, 1, 1]\n}\nconst fbdr_mask: Mask = {\n    cp: [0, 0, 0, 0, 1, 1, 0, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0],\n    tp: [0, 0, 0, 0, 1, 1]\n}\nconst ss_front_mask: Mask = {\n    cp: [0, 0, 0, 0, 1, 1, 0, 1],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],\n    tp: [0, 0, 0, 0, 1, 1]\n}\nconst ss_back_mask: Mask = {\n    cp: [0, 0, 0, 0, 1, 1, 1, 0],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0],\n    tp: [0, 0, 0, 0, 1, 1]\n}\nconst sb_mask : Mask = {\n    cp: [0, 0, 0, 0, 1, 1, 1, 1],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],\n    tp: [0, 0, 0, 0, 1, 1]\n}\nconst cmll_mask : Mask = {\n    cp: [1, 1, 1, 1, 1, 1, 1, 1],\n    ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],\n    tp: [0, 0, 0, 0, 1, 1]\n}\n\nlet CubeUtil = (() => {\n    let is_cube_solved = (cube: CubieT) => {\n        let id = CubieCube.id\n        return arrayEqual(cube.co, id.co) &&\n               arrayEqual(cube.eo, id.eo) &&\n               arrayEqual(cube.cp, id.cp) &&\n               arrayEqual(cube.ep, id.ep)\n    }\n\n    function ext(stickers: StickerT[], f: Face) : StickerExtT[] {\n        return stickers.map(x => {\n            let [a, b, c] = x;\n            return [a,b,c,f]\n        })\n    }\n\n    let { u_face, d_face, l_face, r_face, f_face, b_face } = FaceletCube.faces\n    let stickers = [ ...ext(u_face, U), ...ext(d_face, D),\n        ...ext(l_face, L), ...ext(r_face, R), ...ext(f_face,F),  ...ext(b_face, B)]\n\n    let find_pairs = function() {\n        // enumerate each sticker\n        let edge_stickers = stickers.filter(s => s[2] === Typ.E)\n        let corner_stickers = stickers.filter(s => s[2] === Typ.C)\n\n        let ep_stickers : StickerExtT[][] = Array(12).fill(0).map(_ => Array(0))\n        edge_stickers.map(s => ep_stickers[s[0]].push(s) )\n\n        let cp_stickers : StickerExtT[][] = Array(8).fill(0).map(_ => Array(0))\n        corner_stickers.map(s => cp_stickers[s[0]].push(s))\n\n        const epcp_pairs : [number, number][] = []\n        for (let e = 0; e < 12; e++) {\n            for (let c = 0; c < 8; c++) {\n                let efs = ep_stickers[e]\n                let cfs = cp_stickers[c]\n\n                let match = 0;\n                efs.forEach( (e) => {\n                    cfs.forEach( (c) => { if (e[3] === c[3]) match++ })\n                })\n                if (match === 2) {\n                    epcp_pairs.push( [e, c] )\n                }\n            }\n        }\n\n\n        let get_color = (cube: CubieT, s: StickerExtT) => {\n            return FaceletCube.color_of_sticker(cube, [s[0], s[1], s[2]] )\n        }\n        let func = (cube: CubieT) => {\n            // now we process the cube\n            let connected_pairs : [number, number][]= []\n            //console.log(\"All neighboring pairs \", epcp_pairs)\n            for (let [ep, cp] of epcp_pairs) {\n                let efs = ep_stickers[ep]\n                let cfs = cp_stickers[cp]\n                let cnt = 0;\n                efs.forEach( (e) => {\n                    const c = cfs.filter( (c) => e[3] === c[3])[0]\n                    if (get_color(cube, e) === get_color(cube, c)) cnt++;\n                })\n                if (cnt === 2) {\n                    connected_pairs.push([ep, cp])\n                }\n            }\n            return connected_pairs\n        }\n        return func\n    }()\n\n    let is_mask_solved = (cube: CubieT, { co, eo, cp, ep }: Mask, premove: (MoveT | MoveT[])[]) => {\n        //let moves = [ [], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"] ]\n        co = co || cp\n        eo = eo || ep\n        for (let move of premove) {\n            let cube1 = CubieCube.apply(cube, move)\n            let solved = true\n            for (let i = 0; i < 8 && solved; i++) {\n                if ((co[i] && cube1.co[i] !== 0)\n                    || (cp[i] && cube1.cp[i] !== i)) {\n                    solved = false;\n                }\n            }\n            for (let i = 0; i < 12 && solved; i++) {\n                if ((eo[i] && cube1.eo[i] !== 0)\n                    || (ep[i] && cube1.ep[i] !== i)) {\n                    solved = false;\n                }\n            }\n            if (solved) return true;\n        }\n        return false;\n    }\n\n    const u_premove = [[], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"]]\n    const m2_premove = [[], Move.all[\"M2\"]]\n    //let m2u_premove = [[], Move.parse(\"U\"), Move.parse(\"U'\"), Move.parse(\"U2\"),\n    //Move.parse(\"M2\"), Move.parse(\"M2U\"), Move.parse(\"M2U'\"), Move.parse(\"M2U2\")]\n\n    let is_cmll_solved = (cube: CubieT) => {\n        return is_mask_solved(cube, lse_mask, u_premove)\n    }\n\n    let get_random_with_mask = ({ co, eo, cp, ep }: Mask): CubieT => {\n        co = co || cp\n        eo = eo || ep\n        // get_random -- figure out which masks are 0, and assign random to these\n        let random_ori = (ori_mask: number[], typ: Typ) => {\n            let ori = Array(ori_mask.length).fill(0)\n            let mod = (typ === C) ? 3 : 2\n            let sum: number\n            do {\n                sum = 0\n                for (let i in ori_mask) {\n                    if (ori_mask[i] === 0) {\n                        ori[i] = rand_int(mod)\n                        sum += ori[i]\n                    }\n                }\n            } while (sum % mod > 0)\n            return ori\n        }\n        let random_perm = (perm_mask: number[]) => {\n            let perm: number[] = Array(perm_mask.length).fill(0)\n            let undecided: number[] = []\n            for (let i = 0; i < perm_mask.length; i++) {\n                if (perm_mask[i] === 0) {\n                    undecided.push(i)\n                } else {\n                    perm[i] = i\n                }\n            }\n            rand_shuffle(undecided)\n            for (let i = 0, cnt = 0; i < perm_mask.length; i++) {\n                if (perm_mask[i] === 0) {\n                    perm[i] = undecided[cnt]\n                    cnt += 1\n                }\n            }\n            return perm\n        }\n        let cp_rand, ep_rand, par\n        do {\n            [cp_rand, ep_rand] = [random_perm(cp), random_perm(ep)]\n            par = (getParity(cp_rand) + getParity(ep_rand)) & 1\n        } while (par > 0)\n\n        return {\n            co: random_ori(co, C),\n            cp: cp_rand,\n            eo: random_ori(eo, E),\n            ep: ep_rand,\n            tp: [0, 1, 2, 3, 4, 5]\n        }\n    }\n\n    let get_random_lse = (): CubieT => {\n        let cube = get_random_with_mask(lse_mask)\n        return CubieCube.apply(cube, rand_choice(m2_premove))\n    }\n\n    const ori_to_color_scheme = (() => {\n        // UDFBLR\n        // specify the colors for uf\n        // how to do this?\n        const arr: [string, number][] = [\n            [\"G\", 0x00ff00],\n            [\"B\", 0x0000ff],\n            [\"R\", 0xff0000],\n            [\"O\", 0xff8800],\n            [\"Y\", 0xffff00],\n            [\"W\", 0xffffff],\n            [\"X\", 0xcccccc]\n        ]\n        const colorMap = new Map<string, number>(arr)\n        // UDFBLR from UF\n        // INFERR UFR from UF?\n        const valid_schemes = [\n            \"WYGBOR\",\n            \"WYBGRO\",\n            \"WYROGB\",\n            \"WYORBG\",\n            \"YWGBRO\",\n            \"YEBGOR\",\n            \"YWROBG\",\n            \"YWORGB\",\n\n            \"GBWYRO\",\n            \"GBYWOR\",\n            \"GBROYW\",\n            \"GBORWY\",\n            \"BGWYOR\",\n            \"BGYWRO\",\n            \"BGROWY\",\n            \"BGORYW\",\n\n            \"ORWYGB\",\n            \"ORYWBG\",\n            \"ORGBWY\",\n            \"ORBGYW\",\n            \"ROWYBG\",\n            \"ROYWGB\",\n            \"ROGBYW\",\n            \"ROBGWY\",\n        ]\n        const valid_scheme_mapper: { [key: string]: number[] } = Object.create({})\n        valid_schemes.forEach(s => {\n            let arr = s.split('').map(ch => colorMap.get(ch)!)\n            arr.push(colorMap.get(\"X\")!)\n            valid_scheme_mapper[s[0] + s[2]] = arr\n        })\n\n        const mapper = (sel: string) => {\n            return valid_scheme_mapper[sel]\n        }\n\n        return mapper\n    })()\n\n    return {\n        is_cmll_solved,\n        get_random_lse,\n        get_random_with_mask,\n        ori_to_color_scheme,\n        is_cube_solved,\n        find_pairs,\n        stickers\n    }\n})()\n\nlet Mask = {\n    lse_mask, fs_back_mask, fs_front_mask, fbdr_mask, fb_mask, sb_mask, cmll_mask, ss_front_mask, ss_back_mask,\n    empty_mask, dl_solved_mask, db_solved_mask, solved_mask,\n    copy: mask_copy\n}\n\nexport { CubieCube, Move, FaceletCube, CubeUtil, Mask }","import React from 'react'\n\nimport CubeSim from './CubeSim'\nimport { Checkbox, FormControlLabel, FormGroup, makeStyles } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport { FaceletCube, CubeUtil } from '../lib/CubeLib';\n\nimport { AppState, Selector, Action, Config } from \"../Types\";\nimport 'typeface-roboto';\nimport clsx from 'clsx';\nimport { Face } from '../lib/Defs';\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    fixedHeight: {\n      height: 320,\n    },\n    canvasPaper: {\n      padding: theme.spacing(0),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    title : {\n        flexGrow: 1,\n    }\n  }))\n\n\n\nfunction SelectorGroupPanel(props: { selector: Selector, handleChange: (x: string) => () => void }) {\n    let { selector, handleChange } = props\n    var makeBox = (name: string, checked: boolean) => {\n        return (\n        <FormControlLabel\n            control={\n            <Checkbox checked={checked} onChange={handleChange(name)} />\n            }\n            label={name}\n            color=\"primary\"\n            key={name}\n        />)\n    }\n    return (\n        <FormGroup row>\n        {selector.names.map( (name, i) => makeBox(name, !!selector.flags[i]) ) }\n        </FormGroup>\n    );\n}\n\nfunction CmllTrainerView(props: { state: AppState, dispatch: React.Dispatch<Action> } ) {\n    let { state, dispatch } = props\n    let cube = state.cube.state\n    let config = state.config\n    let classes = useStyles()\n    const canvasPaper = clsx(classes.canvasPaper, classes.fixedHeight);\n    let facelet = FaceletCube.from_cubie(cube)\n\n\n    const handleSelectorChange = React.useCallback( (selectorSel: (x: Config) => Selector) => (name: string) => {\n        return function () {\n          let {names , flags} = selectorSel(config)\n          let new_flags = [...flags]\n          let idx = names.indexOf(name)\n          if (0 <= idx && idx < new_flags.length) {\n            new_flags[idx] = 1 - new_flags[idx]\n          }\n\n          let new_config = {...config}\n          let sel = selectorSel(new_config)\n          sel.flags = new_flags\n          dispatch( { type: \"config\", content: new_config })\n        }\n      }, [ config, dispatch ] )\n\n    return (\n    <Container maxWidth=\"lg\" className={classes.container}>\n    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n      <Grid item xs={12} md={10} lg={8} >\n            <Paper className={canvasPaper}>\n              <Box margin=\"auto\">\n              <CubeSim\n                width={300}\n                height={300}\n                cube={facelet}\n                colorScheme={CubeUtil.ori_to_color_scheme(props.state.cube.ori)}\n                facesToReveal={[Face.L]}\n              />\n              </Box>\n            </Paper>\n      </Grid>\n    </Grid>\n    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n      <Grid item xs={12} md={10} lg={8}>\n        <SelectorGroupPanel selector={ config.cmllSelector } handleChange= {handleSelectorChange(d => d.cmllSelector)} />\n      </Grid>\n      <Grid item xs={12} md={10} lg={8}>\n        <SelectorGroupPanel selector={ config.cmllAufSelector } handleChange= {handleSelectorChange(d => d.cmllAufSelector)} />\n      </Grid>\n      <Grid item xs={12} md={10} lg={8}>\n        <SelectorGroupPanel selector={ config.triggerSelector } handleChange= {handleSelectorChange(d => d.triggerSelector)} />\n      </Grid>\n      <Grid item xs={12} md={10} lg={8}>\n        <SelectorGroupPanel selector={ config.orientationSelector } handleChange= {handleSelectorChange(d => d.orientationSelector)} />\n      </Grid>\n    </Grid>\n    </Container>\n    );\n}\n\nexport default CmllTrainerView\n\n\n","import { Config, Selector } from \"../Types\"\nimport { version } from \"../Version\"\n\nfunction getActiveNames(s : Selector) {\n    let ans = []\n    for (let i = 0; i < s.flags.length; i++) {\n        if (s.flags[i] === 1) {\n            ans.push(s.names[i])\n        }\n    }\n    return ans\n}\n\nfunction getActiveName(s : Selector) {\n    for (let i = 0; i < s.flags.length; i++) {\n        if (s.flags[i] === 1) {\n            return (s.names[i])\n        }\n    }\n    return null\n}\n\nconst initialConfig : Config = (() => {\n    let arr_ori_flag = Array(24).fill(0)\n    arr_ori_flag[7] = 1 // YR\n    return {\n        theme: {\n            names: [\"bright\", \"dark\"],\n            flags: [1,0],\n            kind: \"theme\"\n        },\n        cmllSelector: {\n            names: [\"o\", \"s\", \"as\", \"t\", \"l\", \"u\", \"pi\", \"h\"],\n            flags: [1, 1, 1, 1, 1, 1, 1, 1],\n            kind: \"cmll\",\n        },\n        cmllAufSelector: {\n            names: [\"None\", \"U\", \"U'\", \"U2\"],\n            flags: [1, 1, 1, 1],\n            kind: \"u_auf\"\n        },\n        triggerSelector: {\n            names: [\"RUR'\", \"RU'R'\", \"R'U'R\", \"R'UR\"],\n            flags: [1,1,1,1],\n            kind: \"trigger\"\n        },\n        orientationSelector: {\n            label: \"Color Scheme (U-F)\",\n            names: [\n                \"WG\", \"WB\", \"WO\", \"WR\",\n                \"YG\", \"YB\", \"YO\", \"YR\",\n                \"BW\", \"BY\", \"BO\", \"BR\",\n                \"GW\", \"GY\", \"GO\", \"GR\",\n                \"OW\", \"OY\", \"OB\", \"OG\",\n                \"RW\", \"RY\", \"RB\", \"RG\",\n            ],\n            flags: arr_ori_flag,\n            kind: \"orientation\"\n        },\n        fbdrSelector: {\n            label: \"Position of square\",\n            names: [\"FS at back\", \"FS at front\", \"Both\"],\n            flags: [1, 0, 0],\n            kind: \"fbdr\"\n        },\n        fbOnlySelector: {\n            label: \"Solve w/wo DR\",\n            names: [\"FB+DR\", \"FB Last Pair\"],\n            flags: [1, 0],\n            kind: \"fb-only\"\n        },\n        fbPairSolvedSelector: {\n            label: \"Last Pair\",\n            names: [\"Random\", \"Solved(FS at back only)\"],\n            flags: [1, 0],\n            kind: \"fb-pair-solved\"\n        },\n        ssSelector: {\n            label: \"Position of square\",\n            names: [\"SS at front\", \"SS at back\", \"Both\"],\n            flags: [1, 0, 0],\n            kind: \"ss\"\n        },\n        ssPairOnlySelector: {\n            label: \"Solve w/wo DR\",\n            names: [\"SS\", \"SB First Pair\"],\n            flags: [1, 0],\n            kind: \"sb-pair-only\"\n        },\n        solutionNumSelector: {\n            label: \"Number of solutions\",\n            names: [\"5\", \"10\", \"25\"],\n            flags: [1, 0, 0],\n            kind: \"solution-num\"\n        },\n        fbPieceSolvedSelector: {\n            label: \"Difficulty\",\n            names: [\"HARD\", \"DL Solved\", \"DB Solved\", \"Random\"],\n            flags: [1, 0, 0, 0],\n            kind: \"fb-piece-solved\"\n        }\n    }\n})()\n\nlet configManager = function() {\n    const key = \"config\"\n    const versionKey = \"version\"\n    let cache : Config | null = null\n\n    let getConfig = () => {\n        if (cache) {\n            return cache\n        }\n        const item = window.localStorage.getItem(key);\n        const vers = window.localStorage.getItem(versionKey)\n        if ( (vers === null) || (vers === undefined) || (vers !== version)) {\n            window.localStorage.setItem(versionKey, version)\n            window.localStorage.setItem(key, JSON.stringify(initialConfig));\n            return initialConfig\n        }\n        const item1 : Partial<Config> = item ? JSON.parse(item) : initialConfig\n        if ( (item1 === null) || (item1 === undefined) || Object.keys(item1).length === 0) {\n            window.localStorage.setItem(key, JSON.stringify(initialConfig));\n            return initialConfig\n        }\n        // we will also add in unseen fields\n        if (Object.keys(item1).length < Object.keys(initialConfig).length) {\n            const item2 = {...initialConfig, ...item1}\n            window.localStorage.setItem(key, JSON.stringify(item2));\n            return item2\n        }\n        return item1 as Config\n    }\n\n    let setConfig = (partial: Partial<Config>) => {\n        let newConfig : Config = Object.assign(getConfig(), partial)\n        window.localStorage.setItem(key, JSON.stringify(newConfig));\n        cache = newConfig\n    }\n\n    return {\n        getConfig,\n        setConfig\n    }\n}()\n\nlet getConfig = configManager.getConfig\nlet setConfig = configManager.setConfig\n\nexport {\n    getConfig, setConfig, getActiveNames, getActiveName\n}\n","const version = \"0.3\"\n\nexport {version}","import React from 'react'\n\nimport {\n    FormControlLabel, FormGroup, Button, makeStyles, Box,\n    FormControl, FormLabel, RadioGroup, Checkbox, Dialog, DialogTitle, DialogContent, DialogActions\n} from '@material-ui/core';\n\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport Radio from '@material-ui/core/Radio';\n\nimport { AppState, Selector, Config, Action } from '../Types';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(2),\n      backgroundColor: theme.palette.background.default\n    },\n    button: {\n      width: \"100%\",\n    },\n    paper: {\n      padding: theme.spacing(3),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    canvasPaper: {\n      padding: theme.spacing(0),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    infoColumn: {\n      color: theme.palette.background.paper\n    },\n    scrambleColumn: {\n      paddingLeft: theme.spacing(3)\n    },\n    textColumn: {\n      // color: \"black\",\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 138\n      },\n    },\n    fixedHeight: {\n      height: 250,\n    },\n    title : {\n        flexGrow: 1,\n    },\n    select: {\n      color: theme.palette.text.primary\n    },\n    selectLabel: {\n      color: theme.palette.text.secondary\n    }\n\n}))\n\nfunction SingleSelect(props: {state: AppState, dispatch: React.Dispatch<Action>,\n    select: (c: Config) => Selector}) {\n    let { state, dispatch, select } = props\n    let { config } = state\n    let sel = select(config)\n    let classes = useStyles()\n\n    const handleChange = (evt: { target: { value: string; }; }) => {\n      let { names } = sel\n      let n = names.length\n      let new_flags = Array(n).fill(0)\n\n      for (let i = 0; i < names.length; i++) {\n        if (names[i] === evt.target.value) {\n          new_flags[i] = 1\n        }\n      }\n      let new_config = JSON.parse(JSON.stringify(config))\n      select(new_config).flags = new_flags\n      if (new_config.fbPairSolvedSelector.flags[1] === 1) {\n        new_config.fbdrSelector.flags = [1, 0, 0]\n      }\n      dispatch( { type: \"config\", content: new_config })\n    }\n\n    let radioValue = function() {\n      let { names, flags } = sel\n      for (let i = 0; i < flags.length; i++) {\n        if (flags[i] === 1) return names[i]\n      }\n      return \"\"\n    }()\n\n    let label = sel.label || \"\"\n    return (\n      <FormControl component=\"fieldset\" className={classes.select}>\n      <FormLabel component=\"legend\"className={classes.selectLabel} >{label}</FormLabel>\n      <RadioGroup aria-label=\"position\" name=\"position\" value={radioValue} onChange={handleChange} row>\n        {\n          sel.names.map(name => (\n            <FormControlLabel\n              key={name}\n              value={name}\n              control={<Radio color=\"primary\" />}\n              label={name}\n              labelPlacement=\"end\"\n            />\n          ))\n        }\n      </RadioGroup>\n    </FormControl>)\n  }\n\n\n\n  function MultiSelect(props: {state: AppState, dispatch: React.Dispatch<Action>, select: (c: Config) => Selector}) {\n    let { state, dispatch, select } = props\n    let { config } = state\n\n    let sel = select(config)\n    const handleChange = (evt: { target: { value: string; checked: boolean }; }) => {\n      console.log(\"clicked \", evt.target.value, evt.target.checked)\n      let { names, flags } = sel\n      let new_flags = [...flags]\n\n      for (let i = 0; i < names.length; i++) {\n        if (names[i] === evt.target.value) {\n          new_flags[i] = (evt.target.checked)? 1 : 0\n        }\n      }\n      let new_config = JSON.parse(JSON.stringify(config))\n      select(new_config).flags = new_flags\n      dispatch( { type: \"config\", content: new_config })\n    }\n\n    let makeBox = (name: string, checked: boolean) => {\n      return (\n      <FormControlLabel\n          control={\n          <Checkbox checked={checked} onChange={handleChange} />\n          }\n          label={name}\n          color=\"primary\"\n          key={name}\n          value={name}\n      />)\n    }\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n      setOpen(true);\n    };\n    const handleClose = () => {\n      setOpen(false);\n    }\n    let label = sel.label || \"\"\n    return (\n    <div>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Box height={8}/>\n      <Button color=\"primary\" variant=\"outlined\" style={{borderWidth: 2}} onClick={handleClickOpen}>\n      <SettingsIcon fontSize=\"small\" color=\"primary\" style={{marginLeft: -6, marginRight: 3}}></SettingsIcon>\n        SET\n      </Button>\n      <Dialog disableBackdropClick disableEscapeKeyDown open={open} onClose={handleClose}>\n        <DialogTitle>Color Scheme</DialogTitle>\n        <DialogContent>\n\n          <FormGroup row>\n          {sel.names.map( (name, i) => makeBox(name, !!sel.flags[i]))}\n          </FormGroup>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Ok\n            </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n    )\n  }\n\n  export { SingleSelect, MultiSelect }","import React, { Fragment } from 'react'\n\nimport CubeSim from './CubeSim'\nimport { Button, makeStyles, Divider, Typography, useTheme } from '@material-ui/core';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport { FaceletCube, CubeUtil, Mask, Move } from '../lib/CubeLib';\n\nimport { AppState,  Action, Config} from \"../Types\";\nimport 'typeface-roboto-mono';\nimport clsx from 'clsx';\nimport { Face } from '../lib/Defs';\nimport { getActiveName  } from './Config';\n\nimport { SingleSelect, MultiSelect } from './Select';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n      paddingTop: theme.spacing(0),\n      paddingBottom: theme.spacing(2),\n      backgroundColor: theme.palette.background.default\n    },\n    button: {\n      width: \"100%\",\n    },\n    paper: {\n      padding: theme.spacing(3),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    canvasPaper: {\n      padding: theme.spacing(0),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    infoColumn: {\n      color: theme.palette.background.paper\n    },\n    scrambleColumn: {\n      paddingLeft: theme.spacing(3)\n    },\n    textColumn: {\n      // color: \"black\",\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 138\n      },\n    },\n    fixedHeight: {\n      height: 250,\n    },\n    title : {\n        color: theme.palette.text.hint,\n        fontWeight: 500,\n        borderBottom: \"3px solid\",\n    },\n  }))\n\n\nfunction getMask(state: AppState) : Mask {\n    if (state.mode === \"fbdr\") {\n      const fbOnly = getActiveName(state.config.fbOnlySelector) === \"FB Last Pair\"\n      return fbOnly ? Mask.fb_mask : Mask.fbdr_mask\n    }\n    else if (state.mode === \"ss\") {\n      if (state.case.desc.length === 0) return Mask.sb_mask\n      if (state.case.desc[0].kind === \"ss-front\")\n        return Mask.ss_front_mask\n      else\n        return Mask.ss_back_mask\n    }\n    else if (state.mode === \"fb\") {\n      return Mask.fb_mask\n    }\n    else return Mask.sb_mask\n}\n\nfunction BlockTrainerView(props: { state: AppState, dispatch: React.Dispatch<Action> } ) {\n    let { state, dispatch } = props\n    let cube = state.cube.state\n    let classes = useStyles()\n\n    let facelet = FaceletCube.from_cubie(cube, getMask(state))\n\n    let desc = state.case.desc[0] || { alg: \"\", setup:\"Press next for new case\"}\n    let { alg, setup, alt_algs } = desc\n\n    let spaceButtonText = (state.name === \"hiding\") ? \"Reveal\" : \"Next\"\n    let algs = (alt_algs !== undefined) ? ( [alg, ...alt_algs] ) : [alg]\n\n    // For debug\n    // let alg_scores = algs.map(a => a + \",\" + Move.evaluate(Move.parse(a)).toFixed(2) )\n\n    let minMove = algs.map(a => Move.parse(a).length).reduce( (a, b) => Math.min(a, b), 100 )\n    let algText = (state.name === \"hiding\") ? `(Best = ${minMove} STM)`\n      : (state.name === \"revealed\" && alg.length > 0) ? algs.join(\"\\n\") : \"\"\n\n    const handleSpace = () => {\n      dispatch({type: \"key\", content: \"#space\"})\n    }\n\n    const theme = useTheme()\n    const simBackground = getActiveName(state.config.theme) === \"bright\" ? \"#eeeeef\" : theme.palette.background.paper\n\n    return (\n    <Box className={classes.container}>\n      <Container maxWidth=\"sm\" className={classes.container}>\n\n      <Grid container>\n        <Grid item xs={12}>\n        <Paper className={ clsx(classes.canvasPaper, classes.fixedHeight) }>\n          <Box margin=\"auto\">\n            <CubeSim\n              width={250}\n              height={250}\n              cube={facelet}\n              colorScheme={CubeUtil.ori_to_color_scheme(props.state.cube.ori)}\n              bgColor={simBackground}\n              facesToReveal={ [Face.L, Face.B, Face.D]  }\n            />\n          </Box>\n        </Paper>\n        </Grid>\n      </Grid>\n\n      <Paper className={classes.paper} elevation={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6} className={classes.scrambleColumn} >\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12} className={classes.infoColumn} >\n            <Box display=\"flex\">\n              <Box className={classes.title} >\n                Scramble\n              </Box>\n            </Box>\n          </Grid>\n\n          <Grid item xs={12}  >\n            <Box paddingBottom={1} lineHeight={1} className={classes.textColumn}>\n            <Typography style={{whiteSpace: 'pre-line', fontSize: 20, fontWeight: 400}}>\n                {setup}\n              </Typography>\n            </Box>\n          </Grid>\n\n\n        </Grid>\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}className={classes.infoColumn} >\n            <Box display=\"flex\" >\n                <Box className={classes.title} >\n                  Solution\n                </Box>\n            </Box>\n          </Grid>\n\n          <Grid item xs={12} className={classes.textColumn} >\n            <Box paddingBottom={2} lineHeight={1}>\n              <Typography style={{whiteSpace: 'pre-line', fontSize: 16}} >\n                {algText}\n              </Typography>\n            </Box>\n\n          </Grid>\n        </Grid>\n        </Grid>\n\n      </Grid>\n\n      <Grid container spacing={0}>\n        <Grid item xs={4} sm={4} md={3}>\n          <Button onFocus={(evt) => evt.target.blur() } className={classes.button} size=\"medium\" variant=\"contained\" color=\"primary\" onClick={handleSpace}> { /* className={classes.margin}>  */ }\n              {spaceButtonText}\n          </Button>\n        </Grid>\n      </Grid>\n\n      </Paper>\n\n      <Box height={20}/>\n      <Divider/>\n      <Box height={20}/>\n\n      <ConfigPanelGroup {...{state, dispatch} } />\n      </Container>\n</Box>\n\n    );\n}\n\n\n\nfunction ConfigPanelGroup(props: {state: AppState, dispatch: React.Dispatch<Action> }) {\n  let { state, dispatch } = props\n  if (state.mode === \"ss\") {\n    let select1 = (config: Config) => { return config.ssSelector }\n    let select2 = (config: Config) => { return config.ssPairOnlySelector }\n    let select3 = (config: Config) => { return config.solutionNumSelector }\n    let select4 = (config: Config) => { return config.orientationSelector }\n    return (\n      <Fragment>\n      <SingleSelect {...{state, dispatch, select: select1}}> </SingleSelect>\n      <SingleSelect {...{state, dispatch, select: select2}}> </SingleSelect>\n      <SingleSelect {...{state, dispatch, select: select3}}> </SingleSelect>\n      <MultiSelect {...{state, dispatch, select: select4}}> </MultiSelect>\n      </Fragment>\n    )\n  } else if (state.mode === \"fbdr\") {\n    let select1 = (config: Config) => { return config.fbdrSelector }\n    let select2 = (config: Config) => { return config.fbOnlySelector }\n    let select3 = (config: Config) => { return config.fbPairSolvedSelector }\n    let select4 = (config: Config) => { return config.solutionNumSelector }\n    let select5 = (config: Config) => { return config.orientationSelector }\n    return (\n      <Fragment>\n      <SingleSelect {...{state, dispatch, select: select1}}> </SingleSelect>\n      <SingleSelect {...{state, dispatch, select: select2}}> </SingleSelect>\n      <SingleSelect {...{state, dispatch, select: select3}}> </SingleSelect>\n      <SingleSelect {...{state, dispatch, select: select4}}> </SingleSelect>\n      <MultiSelect {...{state, dispatch, select: select5}}> </MultiSelect>\n      </Fragment>\n    )\n  } else if (state.mode === \"fb\") {\n    let select3 = (config: Config) => { return config.fbPieceSolvedSelector }\n    let select4 = (config: Config) => { return config.solutionNumSelector }\n    let select5 = (config: Config) => { return config.orientationSelector }\n\n    return (\n      <Fragment>\n        <SingleSelect {...{ state, dispatch, select: select3 }}> </SingleSelect>\n        <SingleSelect {...{ state, dispatch, select: select4 }}> </SingleSelect>\n        <MultiSelect {...{ state, dispatch, select: select5 }}> </MultiSelect>\n      </Fragment>\n    )\n   } else return <Fragment/>\n}\n\n\n\nexport default BlockTrainerView\n\n\n","import React from 'react'\nimport { AppState, Mode, Action } from \"../Types\";\n\nimport { Box, AppBar, Typography,Button,  Tabs, Tab, makeStyles } from '@material-ui/core';\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\n\nimport CmllTrainerView from './CmllTrainerView';\nimport BlockTrainerView from './BlockTrainerView';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Brightness6Icon from '@material-ui/icons/Brightness6';\nimport InfoIcon from '@material-ui/icons/Info';\n\n\ninterface TabPanelProps {\n  value: number,\n  index: number,\n  children: any,\n  [key: string]: any\n}\nfunction TabPanel(props: TabPanelProps ) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\nconst useStyles = makeStyles(theme => ({\n  page: {\n    backgroundColor: theme.palette.background.default\n  },\n  icon: {\n    minWidth: 0\n  }\n}))\n\n// TODO: Write getter and setter for config items, and also write handlers that map to setters\nfunction AppView(props: { state: AppState, dispatch: React.Dispatch<Action> } ) {\n  //const [locations, setLocations] = React.useState([])\n  let { state, dispatch } = props\n  let classes = useStyles()\n\n  const handleChange = React.useCallback( (_:any, newValue:number) => {\n    const modes : Mode[] = [\"fbdr\", \"ss\", \"fb\", \"cmll\"]\n    if (newValue < modes.length) {\n      setValue(newValue)\n      let mode = modes[newValue]\n      dispatch({type: \"mode\", content: mode})\n    }\n  }, [dispatch])\n\n  const [ open, setOpen ] = React.useState(false)\n  const [value, setValue] = React.useState(0);\n\n  const handleInfoOpen = () => { setOpen(true) }\n  const handleInfoClose = () => { setOpen(false) }\n\n  const toggleBright = () => {\n    const theme_flag = [...state.config.theme.flags]\n    theme_flag[0] = 1 - theme_flag[0]\n    theme_flag[1] = 1 - theme_flag[1]\n    dispatch({ type: \"config\", content: {\n      theme: {\n        ...state.config.theme,\n        flags: theme_flag\n    }}})\n  }\n\n  return (\n    <main>\n      <Dialog open={open} onClose={handleInfoClose} >\n      <DialogTitle>About</DialogTitle>\n      <DialogContent dividers>\n        <Typography gutterBottom style={{whiteSpace: 'pre-line', fontSize: '1.3rem'}}>\n          Welcome to my awesome roux block trainer.\n        </Typography>\n        <br/>\n\n        <Typography gutterBottom style={{whiteSpace: 'pre-line'}}>\n\n        A bunch of shortcuts: <br/>\n        - Space for the next scramble. <br/>\n        - Enter to reset the virtual cube to current scramble. <br/>\n        - Cstimer style virtual cube control. <br/>\n\n        <br/>\n        </Typography>\n\n        {/* <Typography gutterBottom style={{whiteSpace: 'pre-line'}} variant=\"subtitle2\">\n        Currently supporting: FB+DR, SS, CMLL\n        </Typography> */}\n\n        <Typography gutterBottom style={{whiteSpace: 'pre-line'}} variant=\"body2\">\n\n        Feature requests are most definitely welcome. :)\n        </Typography>\n\n        <Typography gutterBottom variant=\"overline\">\n\n        --onionhoney\n        </Typography>\n\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={handleInfoClose}>\n          Got it!\n        </Button>\n      </DialogActions>\n      </Dialog>\n\n      <AppBar color=\"primary\" position=\"static\">\n        <Tabs value={value} onChange={handleChange} scrollButtons=\"on\" variant=\"scrollable\" indicatorColor=\"secondary\" >\n          <Tab onFocus={e => e.target.blur() } label=\"FBDR Trainer\" id='tab0' />\n          <Tab onFocus={e => e.target.blur() } label=\"SSquare Trainer\" id='tab1' />\n          <Tab onFocus={e => e.target.blur() } label=\"Tough FB Trainer\" id='tab2' />\n          <Tab onFocus={e => e.target.blur() } label=\"CMLL Trainer\" id='tab3'/>\n          <div style={{ flexGrow: 1 }}/>\n\n          <Tab id='icon0' onClick={toggleBright} icon={ <Brightness6Icon /> } className={classes.icon} />\n          <Tab id='icon1' onClick={handleInfoOpen} icon={ <InfoIcon /> } className={classes.icon} />\n\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0} className={classes.page}>\n        <BlockTrainerView {...{state, dispatch}} />\n      </TabPanel>\n      <TabPanel value={value} index={1} className={classes.page}>\n        <BlockTrainerView {...{state, dispatch}} />\n      </TabPanel>\n      <TabPanel value={value} index={2} className={classes.page}>\n        <BlockTrainerView {...{state, dispatch}} />\n      </TabPanel>\n      <TabPanel value={value} index={3} className={classes.page}>\n        <CmllTrainerView {...{state, dispatch}} />\n      </TabPanel>\n\n    </main>\n  )\n}\nexport default AppView","// source: \"https://sites.google.com/view/kianroux/cmll\" and https://github.com/AshleyF/briefcubing/blob/master/algs.js\n\n//type oll_case = \"o\"|\"h\"|\"pi\"|\"u\"|\"t\"|\"s\"|\"as\"|\"l\"\nimport { Selector } from \"../Types\";\nimport { rand_choice } from \"./Math\";\n\nconst get_active_names = (sel : Selector) => {\n    let res = []\n    for (let i = 0; i < sel.names.length; i++) {\n        if (sel.flags[i]) {\n            res.push(sel.names[i]);\n        }\n    }\n    return res\n}\n\nexport type AlgDesc = {\n    id: string,\n    alg: string,\n    alt_algs?: string[],\n    setup?: string,\n    kind: string\n}\n\nconst empty_alg : AlgDesc = {\n    id: \"empty\",\n    alg: \"\",\n    kind: \"any\"\n}\n\nconst cmll_algs : AlgDesc[] = [\n    { id: \"o_adjacent_swap\", alg: \"R U R' F' R U R' U' R' F R2 U' R'\", kind: \"cmll\" },\n    { id: \"o_diagonal_swap\", alg: \"r2 D r' U r D' R2 U' F' U' F\", kind: \"cmll\" },\n    { id: \"h_columns\", alg: \"R U R' U R U' R' U R U2 R'\", kind: \"cmll\" },\n    { id: \"h_rows\", alg: \"F R U R' U' R U R' U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"h_column\", alg: \"U R U2' R2' F R F' U2 R' F R F'\", kind: \"cmll\" },\n    { id: \"h_row\", alg: \"r U' r2' D' r U' r' D r2 U r'\", kind: \"cmll\" },\n    { id: \"pi_right_bar\", alg: \"F R U R' U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"pi_back_slash\", alg: \"U F R' F' R U2 R U' R' U R U2' R'\", kind: \"cmll\" },\n    { id: \"pi_x_checkerboard\", alg: \"U' R' F R U F U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"pi_forward_slash\", alg: \"R U2 R' U' R U R' U2' R' F R F'\", kind: \"cmll\" },\n    { id: \"pi_columns\", alg: \"U' r U' r2' D' r U r' D r2 U r'\", kind: \"cmll\" },\n    { id: \"pi_left_bar\", alg: \"U' R' U' R' F R F' R U' R' U2 R\", kind: \"cmll\" },\n    { id: \"u_forward_slash\", alg: \"U2 R2 D R' U2 R D' R' U2 R'\", kind: \"cmll\" },\n    { id: \"u_back_slash\", alg: \"R2' D' R U2 R' D R U2 R\", kind: \"cmll\" },\n    { id: \"u_front_row\", alg: \"R2' F U' F U F2 R2 U' R' F R\", kind: \"cmll\" },\n    { id: \"u_rows\", alg: \"U' F R2 D R' U R D' R2' U' F'\", kind: \"cmll\" },\n    { id: \"u_x_checkerboard\", alg: \"U2 r U' r' U r' D' r U' r' D r\", kind: \"cmll\" },\n    { id: \"u_back_row\", alg: \"U' F R U R' U' F'\", kind: \"cmll\" },\n    { id: \"t_left_bar\", alg: \"U' R U R' U' R' F R F'\", kind: \"cmll\" },\n    { id: \"t_right_bar\", alg: \"U L' U' L U L F' L' F\", kind: \"cmll\" },\n    { id: \"t_rows\", alg: \"F R' F R2 U' R' U' R U R' F2\", kind: \"cmll\" },\n    { id: \"t_front_row\", alg: \"r' U r U2' R2' F R F' R\", kind: \"cmll\" },\n    { id: \"t_back_row\", alg: \"r' D' r U r' D r U' r U r'\", kind: \"cmll\" },\n    { id: \"t_columns\", alg: \"U2 r2' D' r U r' D r2 U' r' U' r\", kind: \"cmll\" },\n    { id: \"s_left_bar\", alg: \"U R U R' U R U2 R'\", kind: \"cmll\" },\n    { id: \"s_x_checkerboard\", alg: \"U L' U2 L U2' L F' L' F\", kind: \"cmll\" },\n    { id: \"s_forward_slash\", alg: \"U F R' F' R U2 R U2' R'\", kind: \"cmll\" },\n    { id: \"s_Columns\", alg: \"U2 R' U' R U' R2' F' R U R U' R' F U2' R\", kind: \"cmll\" },\n    { id: \"s_right_bar\", alg: \"U' R U R' U R' F R F' R U2' R'\", kind: \"cmll\" },\n    { id: \"s_back_slash\", alg: \"U R U' L' U R' U' L\", kind: \"cmll\" },\n    { id: \"as_right_bar\", alg: \"U R' U' R U' R' U2' R\", kind: \"cmll\" },\n    { id: \"as_columns\", alg: \"U' R2 D R' U R D' R' U R' U' R U' R'\", kind: \"cmll\" },\n    { id: \"as_back_slash\", alg: \"U' F' L F L' U2' L' U2 L\", kind: \"cmll\" },\n    { id: \"as_x_checkerboard\", alg: \"U' R U2' R' U2 R' F R F'\", kind: \"cmll\" },\n    { id: \"as_forward_slash\", alg: \"U' L' U R U' L U R'\", kind: \"cmll\" },\n    { id: \"as_left_bar\", alg: \"U' R' U' R U' L U' R' U L' U2 R\", kind: \"cmll\" },\n    { id: \"l_mirror\", alg: \"F R U' R' U' R U R' F'\", kind: \"cmll\" },\n    { id: \"l_inverse\", alg: \"F R' F' R U R U' R'\", kind: \"cmll\" },\n    { id: \"l_pure\", alg: \"R U2 R' U' R U R' U' R U R' U' R U' R'\", kind: \"cmll\" },\n    { id: \"l_front_commutator\", alg: \"R U2 R D R' U2 R D' R2'\", kind: \"cmll\" },\n    { id: \"l_diag\", alg: \"R' U' R U R' F' R U R' U' R' F R2\", kind: \"cmll\" },\n    { id: \"l_back_commutator\", alg: \"U R' U2 R' D' R U2 R' D R2\", kind: \"cmll\" }\n]\n\nlet trigger_algs: AlgDesc[] = [\n    { id: \"RUR'_1\", alg: \"R U R'\", kind:\"trigger\"},\n    { id: \"RUR'_2\", alg: \"r U r'\", kind:\"trigger\"},\n    { id: \"RU'R'_1\", alg: \"R U' R'\", kind:\"trigger\"},\n    { id: \"RU'R'_2\", alg: \"r U' r'\", kind:\"trigger\"},\n    { id: \"R'U'R_1\", alg: \"R' U' R\", kind:\"trigger\"},\n    { id: \"R'U'R_2\", alg: \"r' U' r\", kind:\"trigger\"},\n    { id: \"R'UR_1\", alg: \"R' U R\", kind:\"trigger\"},\n    { id: \"R'UR_2\", alg: \"r' U r\", kind:\"trigger\"}\n]\n\nlet u_auf_algs: AlgDesc[] = [\n    { id: \"U\", alg: \"U\", kind: \"u_auf\"},\n    { id: \"U'\", alg: \"U'\", kind: \"u_auf\"},\n    { id: \"U2\", alg: \"U2\", kind: \"u_auf\"},\n    { id: \"None\", alg: \"\", kind: \"u_auf\"},\n]\n\nlet ori_algs: AlgDesc[] =\n    [\"WG\", \"WB\", \"WO\", \"WR\",\n    \"YG\", \"YB\", \"YO\", \"YR\",\n    \"BW\", \"BY\", \"BO\", \"BR\",\n    \"GW\", \"GY\", \"GO\", \"GR\",\n    \"OW\", \"OY\", \"OB\", \"OG\",\n    \"RW\", \"RY\", \"RB\", \"RG\"].map(s => ({id: s, alg: \"\", kind:\"orientation\" }))\n\nlet lookup_algset = (kind : string) => {\n    switch (kind) {\n        case \"cmll\": return cmll_algs;\n        case \"trigger\": return trigger_algs;\n        case \"orientation\": return ori_algs;\n        case \"u_auf\": return u_auf_algs;\n        default: return []\n    }\n}\n\nlet alg_generator = (selector: Selector) => {\n    let algSet = lookup_algset(selector.kind)\n    let lookup = new Set(get_active_names(selector))\n    let get_prefix = (id: string) => {\n        return id.split(\"_\", 1)[0]\n    }\n    let algs : AlgDesc[] = (() => {\n        return algSet.filter(alg => {\n            let prefix = get_prefix(alg.id);\n            return lookup.has(prefix)\n        })\n    })()\n\n    let next = () => {\n        if (algs.length === 0) {\n            return empty_alg\n        } else {\n            return rand_choice(algs)\n        }\n    }\n    return next\n}\n\nexport { alg_generator }","import { CubieCube, Move } from './CubeLib';\nimport { CubieT, MoveT } from './Defs';\nexport type PrunerConfig = {\n    size: number,\n    encode: (cube : CubieT) => number,\n    solved_states: CubieT[],\n    max_depth: number,\n    moveset: MoveT[]\n}\nexport type PrunerT = {\n    init: () => void,\n    query: (c : CubieT) => number,\n    equal: (c1 : CubieT, c2: CubieT) => boolean,\n    encode: (c : CubieT) => number\n}\n\nexport function Pruner(config: PrunerConfig) : PrunerT {\n    let dist: Uint8Array;\n    let { size, encode, solved_states, max_depth, moveset} = config\n    let initialized = false\n    function init() {\n        if (initialized) return\n        initialized = true\n        dist = new Uint8Array(size).fill(255)\n        for (let state of solved_states) {\n            dist[encode(state)] = 0\n        }\n        let frontier = [...solved_states]\n        let total_expanded = frontier.length\n        for (let i = 0; i < max_depth; i++) {\n            console.log(\"pruner: expanding depth \", i)\n            let new_frontier = []\n            for (let state of frontier) {\n                for (let move of moveset) {\n                    let newState = CubieCube.apply(state, move)\n                    let idx = encode(newState)\n                    if (dist[idx] === 255) {\n                        dist[idx] = i + 1;\n                        new_frontier.push(newState)\n                    }\n                }\n            }\n            frontier = new_frontier\n            total_expanded += frontier.length\n        }\n        console.log(\"Initialization complete. size = \", total_expanded)\n    }\n    function query(cube: CubieT) {\n        let d = dist[encode(cube)]\n        if (d === 255) return max_depth + 1;\n        return d\n    }\n    function equal(cube1: CubieT, cube2: CubieT) {\n        return encode(cube1) === encode(cube2)\n    }\n    return  {\n        init,\n        query,\n        equal,\n        encode\n    }\n}\n\nlet fbdrPrunerConfig : PrunerConfig = function() {\n    const esize = Math.pow(24, 4)\n    const csize = Math.pow(24, 2)\n    const size = esize * csize\n\n    function encode(cube:CubieT) {\n      let c1 = 0, c2 = 0\n      for (let i = 0; i < 8; i++) {\n        if (cube.cp[i] === 4) {\n          c1 = i * 3 + cube.co[i]\n        } else if (cube.cp[i] === 5) {\n          c2 = i * 3 + cube.co[i];\n        }\n      }\n      const enc_c = c1 * 24 + c2\n      let e1 = 0, e2 = 0, e3 = 0, e4 = 0\n      for (let i = 0; i < 12; i++) {\n          switch (cube.ep[i]) {\n              case 5 : e1 = i * 2 + cube.eo[i]; break;\n              case 8 : e2 = i * 2 + cube.eo[i]; break;\n              case 9 : e3 = i * 2 + cube.eo[i]; break;\n              case 7 : e4 = i * 2 + cube.eo[i]; break;\n          }\n      }\n      const enc_e = e1 * (24 * 24 * 24) + e2 * (24 * 24) + e3 * 24 + e4\n      return enc_c + 24 * 24 * enc_e\n    }\n\n    const moves = [[]] //, Move.parse(\"L R'\"), Move.parse(\"L' R\"), Move.parse(\"L2 R2\")]\n    const solved_states = moves.map( (move : MoveT[]) => CubieCube.apply(CubieCube.id, move))\n\n    const max_depth = 4\n    const moveset : MoveT[] = [\"U\", \"U2\", \"U'\", \"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\",\n    \"r\", \"r2\", \"r'\", \"D\", \"D2\", \"D'\", \"M\", \"M'\", \"M2\", \"B\", \"B'\", \"B2\"].map(s => Move.all[s])\n\n    return {\n        size,\n        encode,\n        solved_states,\n        max_depth,\n        moveset\n    }\n}()\n\n\nlet fbPrunerConfig : PrunerConfig = function() {\n    const esize = Math.pow(24, 3)\n    const csize = Math.pow(24, 2)\n    const size = esize * csize * 6\n\n    function encode(cube:CubieT) {\n      let c1 = 0, c2 = 0\n      for (let i = 0; i < 8; i++) {\n        if (cube.cp[i] === 4) {\n          c1 = i * 3 + cube.co[i]\n        } else if (cube.cp[i] === 5) {\n          c2 = i * 3 + cube.co[i];\n        }\n      }\n      const enc_c = c1 * 24 + c2\n      let e1 = 0, e2 = 0, e3 = 0\n      for (let i = 0; i < 12; i++) {\n          switch (cube.ep[i]) {\n              case 5 : e1 = i * 2 + cube.eo[i]; break;\n              case 8 : e2 = i * 2 + cube.eo[i]; break;\n              case 9 : e3 = i * 2 + cube.eo[i]; break;\n          }\n      }\n      const enc_e = e1 * (24 * 24 ) + e2 * (24 ) + e3\n      const enc_ce = enc_c + 24 * 24 * enc_e\n\n      let t1 = 0\n      for (let i = 0; i < 5; i++) {\n          if (cube.tp[i] === 4) { t1 = i }\n      }\n      const enc = enc_ce * 6 + t1\n      return enc\n    }\n\n    const moves = [[]] //, Move.parse(\"L R'\"), Move.parse(\"L' R\"), Move.parse(\"L2 R2\")]\n    const solved_states = moves.map( (move : MoveT[]) => CubieCube.apply(CubieCube.id, move))\n\n    const max_depth = 4\n    const moveset : MoveT[] = [\"U\", \"U2\", \"U'\", \"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\",\n    \"r\", \"r2\", \"r'\", \"D\", \"D2\", \"D'\", \"M\", \"M'\", \"M2\", \"B\", \"B'\", \"B2\"] /* \"E\", \"E'\", \"E2\", \"S\", \"S'\", \"S2\" ]*/\n    .map(s => Move.all[s])\n\n    return {\n        size,\n        encode,\n        solved_states,\n        max_depth,\n        moveset\n    }\n}()\n\n\n\n\nlet ssPrunerConfig = (is_front: boolean) => {\n    const size = Math.pow(24, 3)\n\n    const c1 = is_front ? 7 : 6;\n    const e1 = is_front ? 11 : 10\n    const e2 = 7\n    function encode(cube:CubieT) {\n      let v = [0 ,0, 0]\n      for (let i = 0; i < 8; i++) {\n        if ( cube.cp[i] === c1) v[0] = i * 3 + cube.co[i]\n      }\n      for (let i = 0; i < 12; i++) {\n          if (cube.ep[i] === e1) v[1] = i * 2 + cube.eo[i];\n          else if (cube.ep[i] === e2) v[2] = i * 2 + cube.eo[i]\n      }\n      return v[0] + v[1] * 24 + v[2] * 24 * 24\n    }\n\n    const moves = [[]] //, Move.parse(\"L R'\"), Move.parse(\"L' R\"), Move.parse(\"L2 R2\")]\n    const solved_states = moves.map( (move : MoveT[]) => CubieCube.apply(CubieCube.id, move))\n\n    const max_depth = 5\n    const moveset : MoveT[] = [\"U\", \"U'\", \"U2\", \"R\", \"R'\", \"R2\",\n        \"r\", \"r'\", \"r2\", \"M\", \"M'\", \"M2\"].map(s => Move.all[s])\n\n    return {\n        size,\n        encode,\n        solved_states,\n        max_depth,\n        moveset\n    }\n}\n\nexport { fbdrPrunerConfig, ssPrunerConfig, fbPrunerConfig }","import { CubieCube } from './CubeLib';\nimport { CubieT, MoveT } from './Defs';\nimport { arrayEqual } from './Math';\n\nimport { Pruner, PrunerT, fbdrPrunerConfig, ssPrunerConfig, fbPrunerConfig } from './Pruner';\n\n\ntype SolverConfig = {\n    is_solved: (cube : CubieT) => boolean,\n    moveset: MoveT[],\n    pruners: PrunerT[],\n}\n\ntype Accumulator = {\n    solutions: MoveT[][],\n    capacity: number\n}\n\nexport type SolverT = {\n    solve: (cube : CubieT, l : number, r : number, c : number) => MoveT[][],\n    is_solved: (cube : CubieT) => boolean,\n    getPruner: () => PrunerT[]\n}\nfunction Solver(config: SolverConfig) : SolverT{\n    const MAX_STATE_COUNT = 1000000\n    let { moveset, is_solved, pruners } = config\n    let state_count = 0, prune_count = 0;\n    let accum : Accumulator\n    let max_depth : number\n    let min_depth : number\n\n    enum SState {\n        CONTINUE,\n        STOP\n    };\n\n    function solve_depth(cube: CubieT, min_depth_: number, max_depth_: number, accum_: Accumulator) {\n        accum = accum_\n        max_depth = max_depth_\n        min_depth = min_depth_\n        state_count = 0\n        prune_count = 0\n        search(cube, 0, [])\n        return accum\n    }\n\n    let moveTable = Object.create({})\n    function prepareNextMoveTable() {\n        function getAvailableMove(name : string) {\n            switch (name[0]) {\n                case \"U\": return moveset.filter(k => k.name[0] !== \"U\");\n                case \"D\": return moveset.filter(k => k.name[0] !== \"U\" && k.name[0] !== \"D\");\n                case \"R\": {\n                    let base = moveset.filter(k => k.name[0] !== \"R\" && k.name[0] !== \"r\");\n                    if (name === \"R\") return base.filter(k => k.name !== \"M'\")\n                    if (name === \"R'\") return base.filter(k => k.name !== \"M\")\n                    if (name === \"R2\") return base.filter(k => k.name !== \"M2\")\n                    return base\n                }\n                case \"L\": return moveset.filter(k => k.name[0] !== \"R\" && k.name[0] !== \"M\" && k.name[0] !== \"L\" && k.name[0] !== \"r\");\n                case \"r\": return moveset.filter(k => k.name[0] !== \"R\" && k.name[0] !== \"M\" && k.name[0] !== \"L\" && k.name[0] !== \"r\");\n                case \"M\": return moveset.filter(k => k.name[0] !== \"R\" && k.name[0] !== \"M\" && k.name[0] !== \"L\" && k.name[0] !== \"r\");\n                case \"F\": return moveset.filter(k => k.name[0] !== \"F\");\n                case \"B\": return moveset.filter(k => k.name[0] !== \"F\" && k.name[0] !== \"B\");\n\n                case \"E\": return moveset.filter(k => k.name[0] !== \"U\" && k.name[0] !== \"D\" && k.name[0] !== \"E\");\n                case \"S\": return moveset.filter(k => k.name[0] !== \"F\" && k.name[0] !== \"B\" && k.name[0] !== \"S\");\n            }\n        }\n        for (let move of moveset) {\n            moveTable[move.name] = getAvailableMove(move.name)\n        }\n    }\n    prepareNextMoveTable()\n\n    function expand(cube: CubieT, depth: number, solution: MoveT[]) : SState{\n        const availableMoves = solution.length > 0 ? moveTable[solution[solution.length - 1].name] : moveset\n        const seen_encodings = new Set()\n        seen_encodings.add(pruners[0].encode(cube))\n        for (let move of availableMoves) {\n            let new_cube = CubieCube.apply(cube, move)\n            let enc = pruners[0].encode(new_cube)\n            let redundant = seen_encodings.has(enc)\n            if (!redundant) {\n                seen_encodings.add(enc)\n                solution.push(move);\n                let st : SState = search(new_cube, depth + 1, solution);\n                solution.pop();\n                if (st === SState.STOP) {\n                    return SState.STOP\n                }\n            }\n        }\n        return SState.CONTINUE\n    }\n\n    function try_push(solution: MoveT[], depth: number) {\n        if (depth < min_depth) return SState.CONTINUE\n        if (accum.solutions.length < accum.capacity) {\n            let flag = true\n            for (let sol of accum.solutions) {\n                if (arrayEqual(sol, solution)) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                accum.solutions.push([...solution])\n            }\n        }\n\n        if (accum.solutions.length === accum.capacity) {\n            return SState.STOP\n        } else {\n            return SState.CONTINUE\n        }\n    }\n\n    function search(cube: CubieT, depth: number, solution: MoveT[]) : SState {\n        state_count++;\n        if (state_count > MAX_STATE_COUNT) {\n            return SState.STOP\n        }\n        if (is_solved(cube)) {\n            return try_push(solution, depth)\n        } else {\n            if (depth >= max_depth) return SState.CONTINUE;\n            let d = pruners[0].query(cube)\n            if (d + depth > max_depth) {\n                prune_count++;\n                return SState.CONTINUE\n            } else {\n                return expand(cube, depth, solution)\n            }\n        }\n    }\n\n    function solve(cube: CubieT, depth_l: number, depth_r: number, capacity: number) {\n        let accum : Accumulator = {\n            solutions: [],\n            capacity\n        }\n        for (let i = depth_l; i <= depth_r; i++) {\n            accum = solve_depth(cube, depth_l, i, accum)\n            if (accum.solutions.length === accum.capacity) {\n                break;\n            }\n        }\n        console.log(`Number of states = ${state_count}, pruned = ${prune_count}`);\n        return accum.solutions\n    }\n\n    function getPruner() {\n        return pruners\n    }\n    return { solve, is_solved, getPruner }\n};\n\nlet FbdrSolver = function() {\n    let prunerConfig = fbdrPrunerConfig\n    let pruner = Pruner(prunerConfig)\n    pruner.init()\n    //let solvedEncodings = prunerConfig.solved_states.map(s => prunerConfig.encode(s))\n    function is_solved(cube: CubieT) {\n        return pruner.query(cube) === 0;\n    }\n\n    let config = {\n        is_solved,\n        moveset: prunerConfig.moveset,\n        pruners: [pruner],\n    }\n\n    let solver = Solver(config)\n    return solver\n}\n\nlet FbSolver = function() {\n    let prunerConfig = fbPrunerConfig\n    let pruner = Pruner(prunerConfig)\n    pruner.init()\n    //let solvedEncodings = prunerConfig.solved_states.map(s => prunerConfig.encode(s))\n    function is_solved(cube: CubieT) {\n        return pruner.query(cube) === 0;\n    }\n\n    let config = {\n        is_solved,\n        moveset: prunerConfig.moveset,\n        pruners: [pruner],\n    }\n\n    let solver = Solver(config)\n    return solver\n}\n\nlet SsSolver = function(is_front: boolean) {\n    let prunerConfig = ssPrunerConfig(is_front)\n    let pruner = Pruner(prunerConfig)\n    pruner.init()\n    //let solvedEncodings = prunerConfig.solved_states.map(s => prunerConfig.encode(s))\n    function is_solved(cube: CubieT) {\n        return pruner.query(cube) === 0;\n    }\n\n    let config = {\n        is_solved,\n        moveset: prunerConfig.moveset,\n        pruners: [pruner],\n    }\n\n    let solver = Solver(config)\n    return solver\n}\n\nexport { FbdrSolver, FbSolver, SsSolver }","import { FbdrSolver, SolverT, SsSolver, FbSolver } from './Solver';\n\nlet CachedSolver = function() {\n    let cache : Map<string, SolverT> = new Map()\n    function get(s: string) {\n        if (!cache.has(s)) {\n            switch (s) {\n                case \"fbdr\": cache.set(s, FbdrSolver()); break\n                case \"fb\": cache.set(s, FbSolver()); break\n                case \"ss-front\": cache.set(s, SsSolver(true)); break\n                case \"ss-back\": cache.set(s, SsSolver(false)); break\n            }\n        }\n        return cache.get(s) as SolverT\n    }\n    return {get}\n}()\n\nexport {CachedSolver}","\nimport { AppState, StateT, Action, Mode, Config } from \"../Types\"\nimport { alg_generator, AlgDesc } from \"../lib/Algs\"\nimport { MoveT, CubieT, Face, Typ } from \"../lib/Defs\";\nimport { CubieCube, Move, CubeUtil, Mask, FaceletCube } from '../lib/CubeLib';\nimport { setConfig, getConfig, getActiveNames, getActiveName} from '../components/Config';\nimport { CachedSolver } from \"../lib/CachedSolver\";\nimport { rand_choice, arrayEqual } from '../lib/Math';\n\nexport const getInitialState = (mode?: Mode) : AppState => {\n    mode = mode || \"fbdr\"\n    let initialStateName : StateT = function() {\n        switch (mode){\n            case \"cmll\": return \"solved\"\n            case \"fbdr\":\n            case \"ss\":\n            case \"fb\":\n                return \"revealed\"\n        }\n    }()\n    let ori = getActiveName(getConfig().orientationSelector) || \"YR\"\n    return {\n        name: initialStateName,\n        mode,\n        cube: {\n            state: CubieCube.id,\n            ori,\n            history: [],\n        },\n        case: {\n            state: CubieCube.id,\n            desc: []\n        },\n        config: getConfig()\n    }\n}\n\nexport function reducer(state: AppState, action: Action): AppState {\n    // todo: cache values based on this\n    // console.log(\"prev state\", state)\n    if (action.type === \"key\") {\n        let newState = reduceKey(state, action.content)\n        return newState\n    } else if (action.type === \"config\") {\n        // LESSON: Object.assign is dangerous\n        let newConfig = {...state.config, ...action.content}\n        let newState = reactToConfig(state, newConfig)\n        setConfig(newConfig)\n        return {\n            ...newState,\n            config: newConfig\n        }\n    } else if (action.type === \"mode\") {\n        let mode = action.content\n        state = getInitialState(mode)\n        return state\n    } else{\n        return state\n    }\n}\n\n\n// State Manager\n// Handles actions based on state.\n// \"Passively\" updates localstorage in reduce.\nabstract class StateM  {\n    state: AppState;\n    constructor(state: AppState) {\n        this.state = state\n    }\n    abstract move(s: string): AppState;\n\n    static create(state: AppState) {\n        let mode : Mode = state.mode\n        switch (mode) {\n            case \"fbdr\":\n                return new FbdrStateM(state)\n            case \"ss\":\n                return new SsStateM(state)\n            case \"fb\":\n                return new FbStateM(state)\n            case \"cmll\": {\n                switch (state.name) {\n                    case \"solving\": return new SolvingStateM(state)\n                    case \"solved\": return new SolvedStateM(state)\n                    default: throw new Error(\"impossible\")\n                }\n            }\n        }\n    }\n    abstract reactToConfig(conf : Config): AppState;\n\n    updateScramble(updateCube?: boolean, nextStateName?: StateT) : AppState {\n        return this.state\n    }\n}\n\n\n\nabstract class BlockTrainerStateM extends StateM {\n    abstract solverL : number;\n    abstract solverR : number;\n    abstract getRandom() : [ CubieT,  string];\n\n    updateScramble(updateCube?: boolean, nextStateName?: StateT) : AppState {\n        let update = (updateCube === undefined) ? true : (updateCube || false)\n\n        const state = this.state\n        const [cube, solverName] = (update || state.case.desc.length === 0) ? this.getRandom() :\n            [state.cube.state, state.case.desc[0]!.kind]\n        const solver = CachedSolver.get(solverName)\n        const scramble = solver.solve(cube, this.solverL, this.solverR, 1)[0]\n\n        //console.log(cube, solverName, scramble, this.solverL, this.solverR)\n        const magnification = 4\n\n        const solutionCap = +(getActiveName(state.config.solutionNumSelector) || 5)\n        // not using solutionCap for now\n\n        const setup = Move.to_string(Move.inv(scramble))\n        let solution = solver.solve(cube, 0, this.solverR, solutionCap * magnification)\n        solution.sort( (a, b) => Move.evaluate(a) - Move.evaluate(b) )\n\n        const alg = Move.to_string(solution[0])\n        const alt_algs = solution.slice(1, solutionCap ).map((s: MoveT[]) => Move.to_string(s))\n\n        let oriSel = state.config.orientationSelector\n        let ori = alg_generator(oriSel)().id\n\n        let algdesc: AlgDesc = {\n            id: `${solverName}`,\n            alg,\n            alt_algs,\n            setup,\n            kind: `${solverName}`\n        }\n        // console.log(\"algdesc\", algdesc)\n        return {\n            ...state,\n            name: nextStateName || \"hiding\",\n            cube: {\n                ...state.cube,\n                state: cube,\n                ori\n            },\n            case: {\n                state: cube,\n                desc: [algdesc]\n            }\n        }\n    }\n    control(s: string): AppState {\n        let state = this.state\n        if (s === \"#space\") {\n            if (state.name === \"revealed\") {\n                return this.updateScramble()\n            } else {\n                return {...state,\n                    name: \"revealed\"\n                }\n            }\n        }\n        else if (s === \"#enter\") {\n            return {\n                ...state,\n                cube: {\n                    ...state.cube,\n                    state: state.case.state,\n                }\n            }\n        }\n        else {\n            return state\n        }\n    }\n    move(movestr: string): AppState {\n        let state = this.state\n        let move = Move.parse(movestr)[0]\n        let cube = CubieCube.apply(state.cube.state, move)\n        return {\n            ...state,\n            cube: {\n                ...state.cube,\n                state: cube\n            }\n        }\n    }\n    reactToConfig(conf : Config): AppState {\n        // see if solution cap changed\n        let changed = !arrayEqual(this.state.config.solutionNumSelector.flags, conf.solutionNumSelector.flags)\n        if (changed) {\n            return StateM.create({...this.state, config: conf}).updateScramble(false, this.state.name)\n        } else {\n            return this.state\n        }\n    }\n\n}\n\nconst m_premove = [[], Move.all[\"M\"], Move.all[\"M'\"], Move.all[\"M2\"]]\nconst pairPos : [number, number, number, number][] = [\n    [0, 0, 8, 1], [0, 1, 1, 0], [ 0, 2 , 0, 1],\n    [1, 1, 2, 0], [1, 2, 1, 1],\n    [2, 0, 10, 1], [2, 1, 3, 0], [2, 2, 2, 1],\n    [3, 0, 11, 0], [3, 1, 0, 0], [3, 2, 3, 1],\n    [4, 0, 8, 0], [4, 1, 4, 0],\n    [6, 0, 10, 0], [6, 1, 6, 0], [6, 2, 7, 1],\n    [7, 0, 11, 1], [7, 1, 7, 0], [7, 2, 4, 1]\n]\n\nclass FbdrStateM extends BlockTrainerStateM {\n    solverL : number;\n    solverR : number;\n\n    get_pair_solved_front() {\n        let [cp, co, ep, eo] = rand_choice(pairPos)\n        //let mask = Mask.copy(Mask.fs_front_mask)\n        let cube = CubeUtil.get_random_with_mask(Mask.fs_back_mask)\n        for (let i = 0; i < 8; i++) {\n            if (cube.cp[i] === 4) {\n                cube.cp[i] = cube.cp[cp]\n                cube.co[i] = cube.co[cp]\n                cube.cp[cp] = 4\n                cube.co[cp] = co\n            }\n        }\n        for (let i = 0; i < 12; i++) {\n            if (cube.ep[i] === 8) {\n                cube.ep[i] = cube.ep[ep]\n                cube.eo[i] = cube.eo[ep]\n                cube.ep[ep] = 8\n                cube.eo[ep] = eo\n            }\n        }\n        return cube\n    }\n    get_random_fs_back() {\n        let cube = CubeUtil.get_random_with_mask(Mask.fs_back_mask)\n        return CubieCube.apply(cube, rand_choice(m_premove))\n    }\n\n    get_random_fs_front() {\n        let cube = CubeUtil.get_random_with_mask(Mask.fs_front_mask)\n        return CubieCube.apply(cube, rand_choice(m_premove))\n    }\n\n    getRandom() : [CubieT, string] {\n        const fbOnly = getActiveName(this.state.config.fbOnlySelector) === \"FB Last Pair\"\n        const pairSolved = getActiveName(this.state.config.fbPairSolvedSelector) !== \"Random\"\n        const solverName = fbOnly ? \"fb\" : \"fbdr\"\n        let active = getActiveNames(this.state.config.fbdrSelector)[0]\n        //console.log(\"active\", active)\n        //[\"FP at front\", \"FP at back\", \"Both\"],\n        if (active === \"FS at back\") {\n            if (pairSolved) {\n                return [this.get_pair_solved_front(), solverName]\n            } else\n                return [this.get_random_fs_back(), solverName]\n        } else if (active === \"FS at front\") {\n            return [this.get_random_fs_front(), solverName]\n        } else return [rand_choice([this.get_random_fs_back, this.get_random_fs_front])(),\n            solverName]\n    }\n\n    constructor(state: AppState) {\n        super(state)\n        this.solverL = 8\n        this.solverR = 10\n    }\n}\n\n\nclass SsStateM extends BlockTrainerStateM {\n    solverL: number;\n    solverR: number;\n\n    get_random_fb() {\n        let active = getActiveName(this.state.config.ssPairOnlySelector)\n        let mask = (active === \"SS\")? Mask.fb_mask : Mask.fbdr_mask\n        let cube = CubeUtil.get_random_with_mask(mask)\n        return cube\n    }\n\n    getRandom(): [CubieT, string] {\n        let active = getActiveNames(this.state.config.ssSelector)[0]\n        //[\"FP at front\", \"FP at back\", \"Both\"],\n        let cube = this.get_random_fb()\n        let solver;\n        if (active === \"SS at front\") {\n            solver = \"ss-front\"\n        } else if (active === \"SS at back\") {\n            solver = \"ss-back\"\n        } else {\n            solver = rand_choice([\"ss-back\", \"ss-front\"])\n        }\n        return [cube, solver]\n    }\n\n    constructor(state: AppState) {\n        super(state)\n        this.solverL = 9\n        this.solverR = 10\n    }\n}\n\nclass FbStateM extends BlockTrainerStateM {\n    solverL: number;\n    solverR: number;\n\n    find_center_connected_edges(cube: CubieT) {\n        let centers = [Face.L] // [Face.F, Face.B, Face.L, Face.R]\n        let edges = CubeUtil.stickers.filter(c => c[2] === Typ.E && centers.includes(c[3])\n        && FaceletCube.color_of_sticker(cube, [ c[0], c[1], c[2]]) === c[3] )\n        return edges\n    }\n    get_random() {\n        let active = getActiveName(this.state.config.fbPieceSolvedSelector)\n        let mask\n        if (active === \"Random\") mask = Mask.empty_mask\n        else if (active === \"DL Solved\") mask = Mask.dl_solved_mask\n        else if (active === \"DB Solved\") mask = Mask.db_solved_mask\n        else mask = Mask.empty_mask\n\n        let cube = CubeUtil.get_random_with_mask(mask)\n        if (active !== \"HARD\") return cube\n        let n = 0\n        while (true) {\n            let pairs = CubeUtil.find_pairs(cube)\n            let cc_edges = this.find_center_connected_edges(cube)\n            n++\n            if (pairs.length === 0 && cc_edges.length === 0) {\n                console.log(\"Successful after \" + n + \" tries \");\n                return cube\n            }\n            cube = CubeUtil.get_random_with_mask(Mask.empty_mask)\n        }\n    }\n\n    getRandom(): [CubieT, string] {\n        let active = getActiveNames(this.state.config.ssSelector)[0]\n        let cube = this.get_random()\n        return [cube, \"fb\"]\n    }\n\n    constructor(state: AppState) {\n        super(state)\n        this.solverL = 9\n        this.solverR = 11\n    }\n}\n\n\nabstract class CmllStateM extends StateM {\n    control(s: string): AppState {\n        let state = this.state\n        let { config } = state\n        let { cmllSelector, triggerSelector, cmllAufSelector, orientationSelector } = config\n        let generator = alg_generator(cmllSelector)\n        let trig_generator = alg_generator(triggerSelector)\n        let u_auf_generator = alg_generator(cmllAufSelector)\n        let ori_generator = alg_generator(orientationSelector)\n\n        if (s === \"#enter\") {\n            // SCRAMBLE\n            // enter cleared solving state based on selection\n            let trigger_alg: AlgDesc = trig_generator()\n            let alg: AlgDesc = generator();\n            let u_auf_alg: AlgDesc = u_auf_generator()\n            let alg_str = trigger_alg.alg + \" \" + u_auf_alg.alg + \" \" + alg.alg\n            let moves: MoveT[] = Move.inv(Move.parse(alg_str));\n\n            //console.log(\"moves\", Move.to_string(moves))\n            let cube = CubeUtil.get_random_lse()\n            cube = CubieCube.apply(cube, moves)\n\n            // ori based on ...?\n            let ori: string = ori_generator().id\n            //console.log(\"current ori selector's ori \", ori)\n\n            return ({...state,\n                name: \"solving\",\n                cube: {\n                    state: cube,\n                    ori,\n                    history: [],\n                },\n                case: {\n                    state: cube,\n                    desc: [trigger_alg, alg]\n                },\n            })\n        } else if (s === \"#space\") {\n            // REDO\n            return ({...state,\n                name: \"solving\",\n                cube: {\n                    ...state.cube,\n                    state: state.case.state,\n                    history: []\n                },\n                case: {\n                    ...state.case,\n                }\n            })\n        } else {\n            throw new Error(\"Unrecognized control code\")\n        }\n    }\n    reactToConfig(conf : Config) : AppState {\n        return this.state\n    }\n}\n\nclass SolvingStateM extends CmllStateM {\n    move(move: string): AppState {\n        let state = this.state\n        let moves = Move.parse(move)\n        if (moves.length > 0) {\n            let move = moves[0]\n            let cube = CubieCube.apply(state.cube.state, move)\n            let cmll_solved = CubeUtil.is_cmll_solved(cube)\n            let newState: StateT = cmll_solved ? \"solved\" : \"solving\";\n            return({...state,\n                cube: {\n                    ...state.cube,\n                    state: CubieCube.apply(state.cube.state, move),\n                    history: [...state.cube.history, move],\n                },\n                name: newState\n            })\n        } else {\n            // Nothing to apply\n            return state\n        }\n    }\n}\n\nclass SolvedStateM extends CmllStateM {\n    move(move: string): AppState {\n        return this.state\n    }\n}\n\nfunction reduceKey(state: AppState, code: string): AppState {\n    if (code === \"\") return state;\n\n    const stateM = StateM.create(state)\n    // case match on kind of operation\n    if (code[0] === \"#\") {\n        return stateM.control(code)\n    } else {\n        return stateM.move(code)\n    }\n}\nfunction reactToConfig(state: AppState, conf: Config): AppState {\n    const stateM = StateM.create(state)\n    // case match on kind of operation\n    return stateM.reactToConfig(conf)\n}","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  name: \"bright\",\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#d32f2f',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#eeeeef',\n      paper: '#fff'\n    },\n    text: {\n      primary: '#000',\n      secondary: '#888',\n      hint: '#556cd6'\n    }\n  },\n\n});\nconst themeDark = createMuiTheme({\n  name: \"dark\",\n  palette: {\n    primary: {\n      main: '#757575',\n    },\n    secondary: {\n      main: '#f55057',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#303030',\n      paper: '#424242'\n    },\n    text: {\n      primary: '#fff',\n      secondary: '#ddd',\n      hint: '#ddd'\n    }\n  },\n\n});\n\nexport { theme, themeDark };","import React from 'react'\nimport { defaultKeyMapping } from \"../lib/Defs\";\nimport AppView from \"../components/AppView\"\nimport { reducer, getInitialState } from '../reducers/Reducer'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { theme, themeDark } from '../theme';\nimport { getActiveName } from '../components/Config';\n\nwindow.addEventListener('keypress', function(e) {\n  if(e.keyCode === 32 && e.target === document.body) {\n    e.preventDefault();\n  }\n});\n\nfunction App(props: {}) {\n  const [state, dispatch] = React.useReducer( reducer, getInitialState() )\n\n  // Add event listeners\n  React.useEffect(() => {\n    function downHandler({ key }: { key : string}) {\n      key = key.toUpperCase()\n      if (defaultKeyMapping.hasOwnProperty(key)) {\n        dispatch({\n          type: \"key\", content: defaultKeyMapping[key] }\n        );\n      }\n    }\n    window.addEventListener('keydown', downHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  });\n\n  const appTheme = getActiveName(state.config.theme) === \"bright\" ? theme : themeDark\n  return (\n    <ThemeProvider theme={appTheme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <AppView state={state} dispatch={dispatch} />\n    </ThemeProvider>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}