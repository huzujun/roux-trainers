{"version":3,"sources":["Defs.tsx","Math.tsx","CubeLib.tsx","CubeSim.tsx","AppView.tsx","Algs.tsx","Hooks.tsx","App.tsx","serviceWorker.js","theme.js","index.js"],"names":["Face","Typ","U","D","F","B","L","R","C","E","T","corners_coord","edges_coord","u","cpc","coc","epc","eoc","tpc","name","f","r","l","d","b","m","e","u_face","f_face","color_map","defaultKeyMapping","rand_int","Math","floor","random","rand_incl","rand_choice","arr","length","getParity","perm","visited","Array","fill","follow","i","cnt","res","CubieCube","id","cp","co","ep","eo","tp","apply_partial","o","p","oc","pc","mod","o_new","p_new","console","assert","src","dst","apply_one","cube","move","toc","apply","isArray","from_move","Move","from_moves","moves","get_change","acc_p","acc_o","push","from_cube","make_rot_set","all_moves","us","fs","rs","ls","ds","bs","ms","es","rw","rws","lw","lws","uw","uws","x","xs","y","ys","z","flat","moves_dict","Object","create","forEach","generate_base_moves","all","parse","str","tokens","replace","split","filter","Boolean","token","inv","slice","reverse","map","add_auf","auf_moves","auf_move","concat","to_string","join","FaceletCube","mult_move","face","face_new","work","typ","mod_for_typ","p1","p2","p_curr","o_curr","from_cubie_partial","facelet","o1","o2","color_of_c","color_of_e","color_of_t","Error","d_face","l_face","r_face","b_face","from_cubie","to_unfolded_cube_str","faceletCube","face_count","str_face_map","color_cube","face_char","hasOwnProperty","count","CubeUtil","cmll_mask","u_premove","m2_premove","get_random_with_mask","cp_rand","ep_rand","par","random_ori","ori_mask","sum","ori","random_perm","perm_mask","undecided","j","tmp","rand_shuffle","is_cmll_solved","premove","cube1","solved","is_mask_solved","get_random_l10p","ori_to_color_scheme","colorMap","Map","valid_scheme_mapper","s","ch","get","sel","TAU","PI","axesInfo","THREE","cubeSim","width","height","colorScheme","mode","stickers_tmpl","stickerwrap_tmpl","scene","camera","renderer","antialias","geo","geo_border","position","copy","lookAt","cubeG","add","updateWidthHeight","setSize","setClearColor","aspect","updateProjectionMatrix","domElement","updateCube","remove","faces","cubie","rot","makeRotationFromEuler","rot1","setRotationFromMatrix","multiply","idx","curr_tmpl","sticker","clone","stickerwrap","stickerhint","scale","set","drawCube","renderScene","render","cleanup","dispose","updateColorScheme","colorScheme_","log","materials","_","color","side","materials_border","mat","mesh","setRotationFromEuler","setup","previousProps","CubeSim","props","mount","React","useRef","useEffect","dom","current","appendChild","removeChild","ref","style","useStyles","makeStyles","theme","container","paddingTop","spacing","paddingBottom","paper","padding","display","overflow","flexDirection","fixedHeight","title","flexGrow","SelectorGroupPanel","selector","handleChange","FormGroup","row","names","checked","FormControlLabel","control","Checkbox","onChange","label","key","makeBox","flags","AppView","classes","state","setState","config","fixedHeightPaper","clsx","handleSelectorChange","kind","new_flags","indexOf","new_config","AppBar","Toolbar","Typography","variant","className","Container","maxWidth","Grid","justify","alignItems","item","md","lg","Paper","Box","margin","cmllSelector","triggerSelector","orientationSelector","empty_alg","alg","cmll_algs","triggerAlgs","oriAlgs","alg_generator","algSet","get_algset","lookup","Set","get_active_names","algs","every","prefix","get_prefix","has","arr_ori_flag","initialConfig","initialStateName","initialInfo","desc","useAppState","defaultValue","useState","window","localStorage","getItem","item1","JSON","undefined","keys","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLS","setConfig","stateName","setStateName","setCube","info","setInfo","ori_init","ori_generator","setOri","moveHistory","setMoveHistory","newState","config_","stateName_","cube_","moveHistory_","info_","ori_","App","keyMove","keyMapping","setMove","downHandler","toUpperCase","addEventListener","removeEventListener","useKeyControl","generator","trig_generator","move_str","trigger_alg","alg_str","location","hostname","match","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAAYA,E,kEAAAA,O,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,UAAAA,M,KAGZ,IAQYC,EARNC,EAAIF,EAAKE,EACTC,EAAIH,EAAKG,EACTC,EAAIJ,EAAKI,EACTC,EAAIL,EAAKK,EACTC,EAAIN,EAAKM,EACTC,EAAIP,EAAKO,G,SAGHN,O,SAAAA,I,SAAAA,I,UAAAA,M,KAGZ,IAAMO,EAAIP,EAAIO,EACRC,EAAIR,EAAIQ,EACRC,EAAIT,EAAIS,EAcVC,EAAqC,CACrC,CAACT,EAAEE,EAAEE,GAAI,CAACJ,EAAEI,EAAED,GAAI,CAACH,EAAEG,EAAEE,GAAI,CAACL,EAAEK,EAAEH,GAChC,CAACD,EAAEG,EAAEF,GAAI,CAACD,EAAEE,EAAEC,GAAI,CAACH,EAAEI,EAAEF,GAAI,CAACF,EAAEC,EAAEG,IAIhCK,EAAiC,CACjC,CAACV,EAAEE,GAAI,CAACF,EAAEI,GAAI,CAACJ,EAAEG,GAAI,CAACH,EAAEK,GACxB,CAACJ,EAAEC,GAAI,CAACD,EAAEG,GAAI,CAACH,EAAEE,GAAI,CAACF,EAAEI,GACxB,CAACH,EAAEE,GAAI,CAACD,EAAEC,GAAI,CAACD,EAAEE,GAAI,CAACH,EAAEG,IAgBxBM,EAAY,CACZC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNC,EAAY,CACZN,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,IAAK,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACpCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNE,EAAY,CACZP,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,IAAK,CAAC,GAAI,GAAI,CAAC,EAAG,IAAK,CAAC,GAAI,IACtCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNG,EAAY,CACZR,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNI,EAAY,CACZT,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNK,EAAY,CACZV,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAAK,CAAC,GAAI,IACpCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,GACLC,KAAM,KAGNM,EAAY,CACZX,IAAK,GACLC,IAAK,GACLC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,KAAM,KAGNO,EAAY,CACZZ,IAAK,GACLC,IAAK,GACLC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IACtCC,IAAK,CAAC,EAAG,EAAG,EAAG,GACfC,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAClCC,KAAM,KAONQ,EAAoB,CACpB,CAAC,EAAG,EAAGnB,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGD,GAC7B,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGD,GAC7B,CAAC,EAAG,EAAGD,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGD,IAG7BoB,EAAoB,CACpB,CAAC,EAAG,EAAGpB,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGD,GAC7B,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,GAAG,EAAGD,GAC7B,CAAC,EAAG,EAAGD,GAAI,CAAC,EAAG,EAAGC,GAAI,CAAC,EAAG,EAAGD,IAS7BqB,EAAS,2FAaPC,EAAoB,CACtB,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,IAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,EAAK,KACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,KACL,EAAK,KACL,IAAK,KACL,EAAK,KACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,KACL,EAAK,IACL,EAAK,KACL,IAAK,IACL,IAAK,KACL,MAAS,YACT,IAAK,SCpMLC,EAAW,SAACV,GACZ,OAAOW,KAAKC,MAAMD,KAAKE,SAAWb,IAGlCc,EAAY,SAACb,EAAWD,GACxB,OAAOU,EAASV,EAAIC,EAAI,GAAKA,GAE7Bc,EAAc,SAAYC,GAC1B,OAAOA,EAAIN,EAASM,EAAIC,UAaxBC,EAAY,SAACC,GACb,IAAIC,EAAUC,MAAMF,EAAKF,QAAQK,MAAK,GAClCC,EAAS,SAATA,EAAUC,EAAWC,GACrB,OAAIL,EAAQI,GACD,GAEPJ,EAAQI,GAAK,EACND,EAAOJ,EAAKK,GAAIC,EAAM,KAGjCC,EAAM,EAVsB,uBAWhC,YAAcP,EAAd,+CAAoB,CAChBO,GAAOH,EADS,QACC,IAZW,kFAchC,OAAOG,GCzBPC,EAAa,WAYb,IAAIC,EAAa,CAEbC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACvCC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGpBC,EAAgB,SAACC,EAAkBC,EAAkBC,EAAmBC,EAAoBC,GAC5F,IAAIC,EAAK,YAAOL,GACZM,EAAK,YAAOL,GAChBM,QAAQC,OAAON,EAAGpB,SAAWqB,EAAGrB,QAEhC,IAAK,IAAIO,EAAI,EAAGA,EAAIa,EAAGpB,OAAQO,IAAK,CAEhC,IAAIoB,EAAMN,EAAGd,GAAG,GAAIqB,EAAMP,EAAGd,GAAG,GAChCiB,EAAMI,GAAOT,EAAEQ,GACfJ,EAAMK,IAAQV,EAAES,GAAOP,EAAGb,IAAMe,EAEpC,MAAO,CAACC,EAAOC,IAGfK,EAAY,SAACC,EAAcC,GAAiB,IAAD,EAC5Bd,EAAca,EAAKjB,GAAIiB,EAAKlB,GAAImB,EAAKtD,IAAKsD,EAAKvD,IAxCxD,GAuCqC,mBACtCqC,EADsC,KAClCD,EADkC,OAE5BK,EAAca,EAAKf,GAAIe,EAAKhB,GAAIiB,EAAKpD,IAAKoD,EAAKrD,IAxCxD,GAsCqC,mBAEtCqC,EAFsC,KAElCD,EAFkC,KAGvCkB,EAAM5B,MAAM2B,EAAKnD,IAAIoB,QAAQK,KAAK,GAHK,EAI7BY,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIa,EAAKd,GAAIgB,EAAKD,EAAKnD,IAzC7D,GAqCqC,wBAK3C,MAAQ,CAAEiC,KAAID,KAAIG,KAAID,KAAIE,GALiB,OAQ3CiB,EAAQ,SAACH,EAAcC,GACvB,GAAI3B,MAAM8B,QAAQH,GAAO,CACrB,IAAK,IAAIxB,EAAI,EAAGA,EAAIwB,EAAK/B,OAAQO,IAC7BuB,EAAOD,EAAUC,EAAMC,EAAKxB,IAEhC,OAAOuB,EAEP,OAAOD,EAAUC,EAAMC,IAS/B,MAAO,CACHpB,KACAsB,QACAE,UARY,SAACJ,GACb,OAAOE,EAAMtB,EAAIoB,KAvDR,GAsEbK,EAAO,WACP,IAsBIC,EAAa,SAACC,EAAqBzD,GAEnC,OAxBY,SAACiD,EAAcjD,GAC3B,IAAI0D,EAAa,SAACpB,EAAkBD,EAAkBsB,EAAuBC,GACzE,IAAK,IAAIlC,EAAI,EAAGA,EAAIY,EAAEnB,OAAQO,IACtBA,IAAMY,EAAEZ,IAAe,IAATW,EAAEX,KAEhBiC,EAAME,KAAK,CAACvB,EAAEZ,GAAIA,IAClBkC,EAAMC,KAAKxB,EAAEX,MAIrB/B,EAAsB,GACtBC,EAAqB,GACrBC,EAAsB,GACtBC,EAAqB,GACrBC,EAAsB,GAI1B,OAHA2D,EAAWT,EAAKlB,GAAIkB,EAAKjB,GAAIrC,EAAKC,GAClC8D,EAAWT,EAAKhB,GAAIgB,EAAKf,GAAIrC,EAAKC,GAClC4D,EAAWT,EAAKd,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIpC,EAAK,IACtC,CACHJ,MAAKC,MAAKC,MAAKC,MAAKC,MAAKC,QAIlB8D,CAAUjC,EAAUuB,MAAMvB,EAAUC,GAAI2B,GAAQzD,IAG3D+D,EAAe,SAACb,GAChB,MAAO,CAACA,EACJM,EAAW,CAACN,EAAMA,GAAOA,EAAKlD,KAAO,KACrCwD,EAAW,CAACN,EAAMA,EAAMA,GAAOA,EAAKlD,KAAO,OA+C/CgE,EAjCsB,WACtB,IAAIC,EAAKF,EAAarE,GAClBwE,EAAKH,EAAa9D,GAClBkE,EAAKJ,EAAa7D,GAClBkE,EAAKL,EAAa5D,GAClBkE,EAAKN,EAAa3D,GAClBkE,EAAKP,EAAa1D,GAClBkE,EAAKR,EAAazD,GAClBkE,EAAKT,EAAaxD,GAElBkE,EAAKjB,EAAW,CAACtD,EAAGqE,EAAG,IAAK,KAC5BG,EAAMX,EAAaU,GACnBE,EAAKnB,EAAW,CAACrD,EAAGG,GAAI,KACxBsE,EAAMb,EAAaY,GACnBE,EAAKrB,EAAW,CAAC9D,EAAGa,GAAI,KACxBuE,EAAMf,EAAac,GAEnBE,EAAIvB,EAAW,CAACtD,EAAGkE,EAAG,GAAIG,EAAG,IAAK,KAClCS,EAAKjB,EAAagB,GAClBE,EAAIzB,EAAW,CAAC9D,EAAGa,EAAG8D,EAAG,IAAK,KAC9Ba,EAAKnB,EAAakB,GAClBE,EAAI3B,EAAW,CAACuB,EAAGE,EAAGF,EAAGA,EAAGA,GAAI,KAEhCtB,EAAQ,CACRQ,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAC5BQ,EAAIE,EAHCnB,EAAaoB,GAIlBT,EAAKE,EAAKE,GACZM,OACEC,EAAuCC,OAAOC,OAAO,IAEzD,OADA9B,EAAM+B,SAAQ,SAAAlF,GAAC,OAAI+E,EAAW/E,EAAEN,MAAQM,KACjC+E,EAGKI,GAuChB,MAAO,CACHC,IAAK1B,EACL2B,MAxCQ,SAACC,GAET,IAAIC,GADJD,EAAMA,EAAIE,QAAQ,MAAO,KAAKA,QAAQ,KAAM,MAAMA,QAAQ,KAAM,OAC/CC,MAAM,OAAOC,OAAOC,SACjCrE,EAAe,GAHM,uBAIzB,YAAkBiE,EAAlB,+CAA0B,CAAC,IAAlBK,EAAiB,QAClBhD,EAAOc,EAAUkC,GACrB,IAAIhD,EAGA,MAAO,GAFPtB,EAAIiC,KAAKX,IAPQ,kFAazB,OAAOtB,GA4BPuE,IAzBM,SAANA,EAAOjD,GACP,GAAI3B,MAAM8B,QAAQH,GACd,OAAOA,EAAKkD,MAAM,GAAGC,UAAUC,IAAIH,GAAKf,OAExC,IAAIpF,EACJ,OAAQkD,EAAKlD,KAAKkD,EAAKlD,KAAKmB,OAAS,IACjC,IAAK,IAAKnB,EAAOkD,EAAKlD,KAAKoG,MAAM,EAAGlD,EAAKlD,KAAKmB,OAAS,GAAI,MAC3D,IAAK,IAAKnB,EAAOkD,EAAKlD,KAAM,MAC5B,QAASA,EAAOkD,EAAKlD,KAAO,IAEhC,MAAO,CAACgE,EAAUhE,KAgBtBuG,QAvFU,SAAC9C,EAAqB+C,GAEhC,IAAIC,GADJD,EAAYA,GAAa,CAAC,GAAIjD,EAAKmC,IAAL,EAAenC,EAAKmC,IAAI,MAAOnC,EAAKmC,IAAL,KACpC7E,KAAKC,MAAMD,KAAKE,SAAWyF,EAAUrF,SAC9D,OAAII,MAAM8B,QAAQoD,GACPhD,EAAMiD,OAAOD,IAEpBhD,EAAMI,KAAK4C,GACJhD,IAiFXkD,UAbY,SAAZA,EAAazD,GACb,OAAI3B,MAAM8B,QAAQH,GACPA,EAAKoD,IAAIK,GAAWC,KAAK,KAEzB1D,EAAKlD,OAhHb,GA8HP6G,EAAc,WACd,IAAIC,EAAY,SAACC,EAAgB7D,GAmB7B,IAlBA,IAAI8D,EAAkB,YAAOD,GAQzBE,EAAO,SAAC3E,EAAYD,EAAW6E,GAG/B,IAFA,IAAIzE,EARU,SAACyE,GACf,OAAQA,GACJ,KAAK7H,EAAG,OAAO,EACf,KAAKC,EAAG,OAAO,EACf,KAAKC,EAAG,OAAO,GAIT4H,CAAYD,GADsB,cAE7B5E,EAF6B,GAEvC8E,EAFuC,KAEnCC,EAFmC,KAGnC3F,EAAI,EAAGA,EAAIqF,EAAK5F,OAAQO,IAAK,CAAC,IAAD,cACDqF,EAAKrF,GADJ,GAC7B4F,EAD6B,KACrBC,EADqB,YAEjBL,GAAOI,IAAWF,IAC/BJ,EAAStF,GAAK,CAAC2F,GAAKE,EAASlF,GAAKI,EAAKyE,MAI1CxF,EAAI,EAAGA,EAAIwB,EAAKvD,IAAIwB,OAAQO,IACjCuF,EAAK/D,EAAKvD,IAAI+B,GAAIwB,EAAKtD,IAAI8B,GAAIrC,GAEnC,IAAK,IAAIqC,EAAI,EAAGA,EAAIwB,EAAKrD,IAAIsB,OAAQO,IACjCuF,EAAK/D,EAAKrD,IAAI6B,GAAIwB,EAAKpD,IAAI4B,GAAIpC,GAEnC,IAAK,IAAIoC,EAAI,EAAGA,EAAIwB,EAAKnD,IAAIoB,OAAQO,IACjCuF,EAAK/D,EAAKnD,IAAI2B,GAAI,EAAGnC,GAEzB,OAAOyH,GAEPQ,EAAqB,SAACvE,EAAcwE,GAMpC,OAAOA,EAAQnB,KAAI,YAAkB,IAAD,mBAAfhE,EAAe,KAAZD,EAAY,KAAT6E,EAAS,KAChC,GAAIA,IAAQ7H,EACR,OAPS,SAACiD,EAAWoF,EAAYC,GAAxB,OACbnI,EAAc8C,IAAI,EAAIoF,EAAKC,GAAM,GAMtBC,CAAW3E,EAAKlB,GAAGO,GAAIW,EAAKjB,GAAGM,GAAID,GACvC,GAAI6E,IAAQ5H,EACf,OAPS,SAACgD,EAAWoF,EAAYC,GAAxB,OACblI,EAAY6C,IAAI,EAAIoF,EAAKC,GAAM,GAMpBE,CAAW5E,EAAKhB,GAAGK,GAAIW,EAAKf,GAAGI,GAAID,GACvC,GAAI6E,IAAQ3H,EACf,OAPS,SAAC+C,GAAD,MAAe,CAACvD,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GAAGkD,GAOpCwF,CAAW7E,EAAKd,GAAGG,IAE1B,MAAMyF,MAAM,qBAAuBb,OAI3CzD,EAAQF,EAAKmC,IAjDS,EAuDf,CACHsC,OALSlB,EAAUrG,EAAQgD,EAAM,OAKzBwE,OAJCnB,EAAUrG,EAAQgD,EAAK,GAIhByE,OAHPpB,EAAUrG,EAAQgD,EAAM,OAGT0E,OAFfrB,EAAUrG,EAAQgD,EAAK,KAKlCuE,EA3DoB,EA2DpBA,OAAQC,EA3DY,EA2DZA,OAAQC,EA3DI,EA2DJA,OAAQC,EA3DJ,EA2DIA,OAgC9B,MAAO,CACHC,WA/Ba,SAACnF,GAKd,MAFY,CAACzC,EAAQwH,EAAQvH,EAAQ0H,EAAQF,EAAQC,GAClC5B,KAAI,SAACmB,GAAD,OAAaD,EAAmBvE,EAAMwE,OA4B7DY,qBAxBuB,SAACC,GAOxB,IANA,IAAIC,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BC,EAAwC,CACxC,EAAKzJ,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,GAG7CqJ,EAAa,GACR/G,EAAI,EAAGA,EAAIhB,EAAUS,OAAQO,IAAK,CACvC,IAAIgH,EAAYhI,EAAUgB,GAC1B,GAAI8G,EAAaG,eAAeD,GAAY,CACxC,IAAI3B,EAAeyB,EAAaE,GAC5BE,EAAQL,EAAWxB,GAEvB0B,GARW,SAOCH,EAAYvB,GAAM6B,IAE9BL,EAAWxB,IAAS,OAEpB0B,GAAc/H,EAAUgB,GAGhC,OAAO+G,IAxFG,GAyGdI,EAAY,WACZ,IAuBIC,EAAkB,CAClB/G,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BE,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEtC8G,EAAY,CAAC,GAAIxF,EAAKmC,IAAL,EAAenC,EAAKmC,IAAI,MAAOnC,EAAKmC,IAAL,IAEhDsD,GADiBzF,EAAKmC,IAAL,EAAenC,EAAKmC,IAAI,MAAOnC,EAAKmC,IAAL,GACnC,CAAC,GAAInC,EAAKmC,IAAL,KAOlBuD,GANmB1F,EAAKoC,MAAM,KAAMpC,EAAKoC,MAAM,MAAOpC,EAAKoC,MAAM,MACrEpC,EAAKoC,MAAM,MAAOpC,EAAKoC,MAAM,OAAQpC,EAAKoC,MAAM,QAASpC,EAAKoC,MAAM,QAKzC,SAAC,GAAsC,IAApC3D,EAAmC,EAAnCA,GAAIE,EAA+B,EAA/BA,GAAIH,EAA2B,EAA3BA,GAAIE,EAAuB,EAAvBA,GACtCD,EAAKA,GAAMD,EACXG,EAAKA,GAAMD,EAEX,IAkCIiH,EAASC,EAASC,EAlClBC,EAAa,SAACC,EAAoBpC,GAClC,IAEIqC,EAFAC,EAAMjI,MAAM+H,EAASnI,QAAQK,KAAK,GAClCiB,EAAOyE,IAAQ7H,EAAK,EAAI,EAE5B,GAEI,IAAK,IAAIqC,KADT6H,EAAM,EACQD,EACU,IAAhBA,EAAS5H,KACT8H,EAAI9H,GAAKd,EAAS6B,GAClB8G,GAAOC,EAAI9H,UAGd6H,EAAM9G,EAAM,GACrB,OAAO+G,GAEPC,EAAc,SAACC,GAGf,IAFA,IAAIrI,EAAiBE,MAAMmI,EAAUvI,QAAQK,KAAK,GAC9CmI,EAAsB,GACjBjI,EAAI,EAAGA,EAAIgI,EAAUvI,OAAQO,IACb,IAAjBgI,EAAUhI,GACViI,EAAU9F,KAAKnC,GAEfL,EAAKK,GAAKA,GD3WX,SAAYR,GAC3B,IAAK,IAAIQ,EAAI,EAAGvB,EAAIe,EAAIC,OAAQO,EAAIvB,EAAI,EAAGuB,IAAK,CAC5C,IAAIkI,EAAI5I,EAAUU,EAAGvB,EAAI,GACrB0J,EAAM3I,EAAIQ,GACdR,EAAIQ,GAAKR,EAAI0I,GACb1I,EAAI0I,GAAKC,GCyWLC,CAAaH,GACb,IAAK,IAAIjI,EAAI,EAAGC,EAAM,EAAGD,EAAIgI,EAAUvI,OAAQO,IACtB,IAAjBgI,EAAUhI,KACVL,EAAKK,GAAKiI,EAAUhI,GACpBA,GAAO,GAGf,OAAON,GAGX,EAAG,CAAC,IAAD,EACsB,CAACoI,EAAY1H,GAAK0H,EAAYxH,IAAzCkH,EADX,KAECC,EAAOhI,EADN8H,EADF,MAE6B9H,EAAU+H,GAAY,QAC7CC,EAAM,GAEf,MAAO,CACHpH,GAAIqH,EAAWrH,EAAI3C,GACnB0C,GAAImH,EACJhH,GAAImH,EAAWnH,EAAI5C,GACnB2C,GAAIkH,EACJhH,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,MAgE5B,MAAO,CACH4H,eAtHiB,SAAC9G,GAClB,OAjCiB,SAACA,EAAD,EAAyC+G,GAAkC,IAA1DhI,EAAyD,EAAzDA,GAAIE,EAAqD,EAArDA,GAAIH,EAAiD,EAAjDA,GAAIE,EAA6C,EAA7CA,GAE9CD,EAAKA,GAAMD,EACXG,EAAKA,GAAMD,EAHgF,2BAI3F,YAAiB+H,EAAjB,+CAA0B,CAGtB,IAHuB,IAAlB9G,EAAiB,QAClB+G,EAAQpI,EAAUuB,MAAMH,EAAMC,GAC9BgH,GAAS,EACJxI,EAAI,EAAGA,EAAI,GAAKwI,EAAQxI,KACxBM,EAAGN,IAAsB,IAAhBuI,EAAMjI,GAAGN,IACfK,EAAGL,IAAMuI,EAAMlI,GAAGL,KAAOA,KAC7BwI,GAAS,GAGjB,IAAK,IAAIxI,EAAI,EAAGA,EAAI,IAAMwI,EAAQxI,KACzBQ,EAAGR,IAAsB,IAAhBuI,EAAM/H,GAAGR,IACfO,EAAGP,IAAMuI,EAAMhI,GAAGP,KAAOA,KAC7BwI,GAAS,GAGjB,GAAIA,EAAQ,OAAO,GAnBoE,kFAqB3F,OAAO,EAYAC,CAAelH,EAAM6F,EAAWC,IAsHvCqB,gBA9DkB,WAClB,IAAInH,EAAOgG,EAAqBH,GAChC,OAAOjH,EAAUuB,MAAMH,EAAMhC,EAAY+H,KA6DzCqB,oBAxDyB,WAIzB,IAQMC,EAAW,IAAIC,IARW,CAC5B,CAAC,IAAK,OACN,CAAC,IAAK,KACN,CAAC,IAAK,UACN,CAAC,IAAK,UACN,CAAC,IAAK,UACN,CAAC,IAAK,YAiCJC,EAAmDlF,OAAOC,OAAO,IA5BjD,CAClB,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UAGUC,SAAQ,SAAAiF,GAAOD,EAAoBC,EAAE,GAAKA,EAAE,IAAMA,EAAE1E,MAAM,IAAIO,KAAI,SAAAoE,GAAE,OAAIJ,EAASK,IAAID,SAMnG,OAJe,SAACE,GACZ,OAAOJ,EAAoBI,IA/CN,IAjGjB,G,cChSVC,EAAgB,EAAVhK,KAAKiK,GACXC,EAA4C,CAC9C,CAAC,IAAIC,IAAe,EAAI,EAAI,GAAI,IAAIA,KAAaH,EAAI,EAAI,EAAI,IAC7D,CAAC,IAAIG,IAAe,GAAI,EAAI,GAAI,IAAIA,IAAaH,EAAI,EAAI,EAAI,IAC7D,CAAC,IAAIG,IAAe,EAAI,EAAI,GAAI,IAAIA,IAAa,EAAI,EAAQ,IAC7D,CAAC,IAAIA,IAAe,EAAI,GAAI,GAAI,IAAIA,IAAa,EAAIH,EAAI,EAAI,IAC7D,CAAC,IAAIG,KAAe,EAAI,EAAI,GAAI,IAAIA,IAAa,GAAIH,EAAI,EAAI,IAC7D,CAAC,IAAIG,IAAe,EAAI,EAAI,GAAI,IAAIA,IAAa,EAAIH,EAAI,EAAI,KAqH3DI,EAlHQ,SAASC,EAAeC,EAAgBC,EAA6BC,GAC/E,IAmBIC,EAA8BC,EAnB5BC,EAAQ,IAAIR,IACZS,EAAS,IAAIT,IAAwB,GAAIE,EAAQC,EAAQ,GAAK,KAC9DO,EAAW,IAAIV,IAAoB,CAAEW,WAAW,IAChDC,EAAM,IAAIZ,IAAoB,IAAS,KACvCa,EAAa,IAAIb,IAAoB,EAAO,GAMrC,SAFbK,EAAOA,GAAQ,OAGXI,EAAOK,SAASC,KAAK,IAAIf,IAAc,EAAW,EAAE,IAAK,EAAE,MAE3DS,EAAOK,SAASC,KAAK,IAAIf,IAAc,EAAS,EAAE,IAAK,EAAE,MAG7DS,EAAOO,OAAO,IAAIhB,IAAc,EAAG,EAAG,IAwDtC,IAAIiB,EAAQ,IAAIjB,IAChBQ,EAAMU,IAAID,GACV,IAUME,EAAoB,SAACjB,EAAeC,GACtCO,EAASU,QAAQlB,EAAOC,GAAQ,GAChCO,EAASW,cAAc,WACvBZ,EAAOa,OAASpB,EAAQC,EACxBM,EAAOc,0BAeX,OALAJ,EAAkBjB,EAAOC,GAKlB,CACHqB,WAAY,WAAO,OAAOd,EAASc,YACnCC,WA/Be,SAACxJ,GAChBuI,EAAMkB,OAAOT,GACbA,EAtCJ,SAAkBU,GAEd,IADA,IAAM1J,EAAO,IAAI+H,IACRtJ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMkL,EAAQ,IAAI5B,IACZ6B,GAAM,IAAI7B,KAAgB8B,sBAAsB/B,EAASrJ,GAAG,IAC5DqL,GAAO,IAAI/B,KAAgB8B,sBAAsB/B,EAAS,GAAG,IACnE6B,EAAMI,sBAAsBH,EAAII,SAASF,IACzC,IAAK,IAAI5H,GAAK,EAAGA,GAAK,EAAGA,IACrB,IAAK,IAAIJ,GAAK,EAAGA,GAAK,EAAGA,IAAK,CAC1B,IAAImI,EAAgB,GAAT/H,EAAI,IAAUJ,EAAI,GAEvBoI,EAAY7B,EAAcqB,EAAMjL,GAAGwL,IACnCE,EAAUD,EAAUE,QACpBC,EAAc/B,EAAiB8B,QAMrC,GAHAD,EAAQtB,SAASC,KAAK,IAAIf,IAAkB,EAAJjG,EAAO,EAAO,EAAJI,IAClDmI,EAAYxB,SAASC,KAAK,IAAIf,IAAkB,EAAJjG,EAAO,KAAa,EAAJI,IAElD,IAANzD,GAA8C,IAANA,GAAoB,OAAT2J,EAAgB,CACnE,IAAMkC,EAAcJ,EAAUE,QAC9BE,EAAYzB,SAASC,KAAK,IAAIf,IAAkB,EAAJjG,EAAO,EAAe,EAAJI,IAC9DyH,EAAMV,IAAIqB,GAEdX,EAAMV,IAAIkB,GACVR,EAAMV,IAAIoB,GAGlBrK,EAAKiJ,IAAIU,GAGb,OADA3J,EAAKuK,MAAMC,IAAI,EAAE,EAAG,EAAE,EAAG,EAAE,GACpBxK,EAOCyK,CAASzK,GACjBuI,EAAMU,IAAID,IA6BV0B,YA1BgB,WAChBjC,EAASkC,OAAOpC,EAAOC,IA0BvBU,oBACA0B,QAhBY,WACZjC,EAAIkC,WAgBJC,kBAxFJ,SAA2B3C,GACvB,IAAI4C,EAAe5C,EACnBxI,QAAQqL,IAAI,uBAAwBD,GACpC,IAAIE,EAAY3M,MAAM,GAAGC,KAAK,GAAG8E,KAAK,SAAC6H,EAAGzM,GAAJ,OAAU,IAAIsJ,IAAwB,CAAEoD,MAAOJ,EAAatM,GAAI2M,KAAKrD,SACvGsD,EAAmB,IAAItD,IAAwB,CAAEoD,MAAO,EAAUC,KAAKrD,MAC3EM,EAAgB4C,EAAU5H,KAAK,SAACiI,GAC5B,IAAIC,EAAO,IAAIxD,IAAWY,EAAK2C,GAE/B,OADAC,EAAKC,qBAAqB1D,EAAS,GAAG,IAC/ByD,KAEXjD,EAAoB,WAChB,IAAIiD,EAAO,IAAIxD,IAAWa,EAAYyC,GAEtC,OADAE,EAAKC,qBAAqB1D,EAAS,GAAG,IAC/ByD,EAHS,KAkFZE,CAAM,IAAK,KAEvBC,EAAgC,KA6CrBC,MA3Cf,SAAiBC,GACf,IAAMC,EAAQC,IAAMC,OAA8B,MAoClD,OAhCIL,IACA/L,QAAQqL,IAAIY,EAAMzD,YAAauD,EAAcvD,aACzCyD,EAAMzD,cAAgBuD,EAAcvD,aACtCH,EAAQ8C,kBAAkBc,EAAMzD,aAG9ByD,EAAM5L,OAAS0L,EAAc1L,MAC/BgI,EAAQwB,WAAWoC,EAAM5L,MAE3BgI,EAAQ0C,cACR/K,QAAQqL,IAAI,iBAGhBgB,qBAAW,WACT,IAAIC,EAAMjE,EAAQuB,aACd2C,EAAUL,EAAMK,QAQpB,OAPAA,EAAQC,YAAYF,GAEpBjE,EAAQ8C,kBAAkBc,EAAMzD,aAChCH,EAAQwB,WAAWoC,EAAM5L,MACzBgI,EAAQ0C,cACR/K,QAAQqL,IAAI,gBAEL,WACHkB,EAAQE,YAAaH,MAExB,IAIHP,EAAgBE,EAET,yBACHS,IAAOR,EACPS,MAAS,CAACrE,MAAQ2D,EAAM3D,MAAOC,OAAS0D,EAAM1D,W,6UC3KpD,IAAMqE,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,WAAYF,EAAMG,QAAQ,GAC1BC,cAAeJ,EAAMG,QAAQ,IAE/BE,MAAO,CACLC,QAASN,EAAMG,QAAQ,GACvBI,QAAS,OACTC,SAAU,OACVC,cAAe,UAEjBC,YAAa,CACXjF,OAAQ,KAEVkF,MAAQ,CACJC,SAAU,OAIhB,SAASC,GAAmB1B,GAAyE,IAC7F2B,EAA2B3B,EAA3B2B,SAAUC,EAAiB5B,EAAjB4B,aAYhB,OACE,kBAACC,GAAA,EAAD,CAAWC,KAAG,GACXH,EAASI,MAAMtK,KAAK,SAACtG,EAAM0B,GAAP,OAbX,SAAC1B,EAAc6Q,GAC3B,OACE,kBAACC,GAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAAUH,QAASA,EAASI,SAAUR,EAAazQ,KAErDkR,MAAOlR,EACPoO,MAAM,UACN+C,IAAKnR,IAK2BoR,CAAQpR,IAAQwQ,EAASa,MAAM3P,QAwFxD4P,OAlFf,SAAiBzC,GAEf,IAAI0C,EAAU/B,KACRgC,EAAoB3C,EAApB2C,MAAOC,EAAa5C,EAAb4C,SACPxO,EAAiBuO,EAAjBvO,KAAMyO,EAAWF,EAAXE,OACRjK,EAAUZ,EAAYuB,WAAWnF,GAG/B0O,GAFY9I,EAASkB,eAAe9G,GAEjB2O,aAAKL,EAAQxB,MAAOwB,EAAQnB,cAE/CyB,EAAuB,SAACC,GAAD,OAAkB,SAAC9R,GAAD,OAAkB,WAG/D,IAHqE,EAGvD0R,EACeI,GAAxBlB,EAJgE,EAIhEA,MAAOS,EAJyD,EAIzDA,MAERU,EAAS,YAAOV,GAEhBnE,EAAM0D,EAAMoB,QAAQhS,GACpB,GAAKkN,GAAOA,EAAM6E,EAAU5Q,SAC9B4Q,EAAU7E,GAAO,EAAI6E,EAAU7E,IAGjC,IAAI+E,E,2VAAU,IAAOP,GACIO,EACPH,GAAMT,MAAQU,EAKhCN,EAAS,CACPC,OAAQO,OAIZ,OACE,8BACE,kBAACC,EAAA,EAAD,CAAQpG,SAAS,UACjB,kBAACqG,EAAA,EAAD,KAME,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWf,EAAQlB,OAA5C,kBAMF,kBAACkC,EAAA,EAAD,CAAWC,SAAS,KAAKF,UAAWf,EAAQ5B,WAC1C,kBAAC8C,GAAA,EAAD,CAAM9C,WAAS,EAACE,QAAS,EAAG6C,QAAQ,SAASC,WAAW,UACtD,kBAACF,GAAA,EAAD,CAAMG,MAAI,EAAC5N,GAAI,GAAI6N,GAAI,GAAIC,GAAI,GACzB,kBAACC,GAAA,EAAD,CAAOT,UAAWX,GAChB,kBAACqB,GAAA,EAAD,CAAKC,OAAO,QACZ,kBAAC,EAAD,CACE/H,MAAO,IACPC,OAAQ,IACRlI,KAAMwE,EACN2D,YAAavC,EAASwB,oBAAoBwE,EAAM2C,MAAMhI,WAMlE,kBAACiJ,GAAA,EAAD,CAAM9C,WAAS,EAACE,QAAS,EAAG6C,QAAQ,SAASC,WAAW,UACtD,kBAACF,GAAA,EAAD,CAAMG,MAAI,EAAC5N,GAAI,GAAI6N,GAAI,GAAIC,GAAI,GAC7B,kBAACvC,GAAD,CAAoBC,SAAWkB,EAAOwB,aAAezC,aAAeoB,EAAqB,mBAE3F,kBAACY,GAAA,EAAD,CAAMG,MAAI,EAAC5N,GAAI,GAAI6N,GAAI,GAAIC,GAAI,GAC7B,kBAACvC,GAAD,CAAoBC,SAAWkB,EAAOyB,gBAAkB1C,aAAeoB,EAAqB,sBAE9F,kBAACY,GAAA,EAAD,CAAMG,MAAI,EAAC5N,GAAI,GAAI6N,GAAI,GAAIC,GAAI,GAC7B,kBAACvC,GAAD,CAAoBC,SAAWkB,EAAO0B,oBAAsB3C,aAAeoB,EAAqB,8BC7GtGwB,GAAsB,CACxBvR,GAAI,QACJwR,IAAK,GACLxB,KAAM,OAGJyB,GAAwB,CAC1B,CAAEzR,GAAI,kBAAmBwR,IAAK,oCAAqCxB,KAAM,QACzE,CAAEhQ,GAAI,kBAAmBwR,IAAK,+BAAgCxB,KAAM,QACpE,CAAEhQ,GAAI,YAAawR,IAAK,6BAA8BxB,KAAM,QAC5D,CAAEhQ,GAAI,SAAUwR,IAAK,qCAAsCxB,KAAM,QACjE,CAAEhQ,GAAI,WAAYwR,IAAK,kCAAmCxB,KAAM,QAChE,CAAEhQ,GAAI,QAASwR,IAAK,gCAAiCxB,KAAM,QAC3D,CAAEhQ,GAAI,eAAgBwR,IAAK,2BAA4BxB,KAAM,QAC7D,CAAEhQ,GAAI,gBAAiBwR,IAAK,oCAAqCxB,KAAM,QACvE,CAAEhQ,GAAI,oBAAqBwR,IAAK,gCAAiCxB,KAAM,QACvE,CAAEhQ,GAAI,mBAAoBwR,IAAK,kCAAmCxB,KAAM,QACxE,CAAEhQ,GAAI,aAAcwR,IAAK,kCAAmCxB,KAAM,QAClE,CAAEhQ,GAAI,cAAewR,IAAK,kCAAmCxB,KAAM,QACnE,CAAEhQ,GAAI,kBAAmBwR,IAAK,8BAA+BxB,KAAM,QACnE,CAAEhQ,GAAI,eAAgBwR,IAAK,0BAA2BxB,KAAM,QAC5D,CAAEhQ,GAAI,cAAewR,IAAK,+BAAgCxB,KAAM,QAChE,CAAEhQ,GAAI,SAAUwR,IAAK,gCAAiCxB,KAAM,QAC5D,CAAEhQ,GAAI,mBAAoBwR,IAAK,iCAAkCxB,KAAM,QACvE,CAAEhQ,GAAI,aAAcwR,IAAK,oBAAqBxB,KAAM,QACpD,CAAEhQ,GAAI,aAAcwR,IAAK,yBAA0BxB,KAAM,QACzD,CAAEhQ,GAAI,cAAewR,IAAK,wBAAyBxB,KAAM,QACzD,CAAEhQ,GAAI,SAAUwR,IAAK,+BAAgCxB,KAAM,QAC3D,CAAEhQ,GAAI,cAAewR,IAAK,0BAA2BxB,KAAM,QAC3D,CAAEhQ,GAAI,aAAcwR,IAAK,6BAA8BxB,KAAM,QAC7D,CAAEhQ,GAAI,YAAawR,IAAK,mCAAoCxB,KAAM,QAClE,CAAEhQ,GAAI,aAAcwR,IAAK,qBAAsBxB,KAAM,QACrD,CAAEhQ,GAAI,mBAAoBwR,IAAK,0BAA2BxB,KAAM,QAChE,CAAEhQ,GAAI,kBAAmBwR,IAAK,0BAA2BxB,KAAM,QAC/D,CAAEhQ,GAAI,YAAawR,IAAK,2CAA4CxB,KAAM,QAC1E,CAAEhQ,GAAI,cAAewR,IAAK,iCAAkCxB,KAAM,QAClE,CAAEhQ,GAAI,eAAgBwR,IAAK,sBAAuBxB,KAAM,QACxD,CAAEhQ,GAAI,eAAgBwR,IAAK,wBAAyBxB,KAAM,QAC1D,CAAEhQ,GAAI,aAAcwR,IAAK,uCAAwCxB,KAAM,QACvE,CAAEhQ,GAAI,gBAAiBwR,IAAK,2BAA4BxB,KAAM,QAC9D,CAAEhQ,GAAI,oBAAqBwR,IAAK,2BAA4BxB,KAAM,QAClE,CAAEhQ,GAAI,mBAAoBwR,IAAK,sBAAuBxB,KAAM,QAC5D,CAAEhQ,GAAI,cAAewR,IAAK,+BAAgCxB,KAAM,QAChE,CAAEhQ,GAAI,WAAYwR,IAAK,yBAA0BxB,KAAM,QACvD,CAAEhQ,GAAI,YAAawR,IAAK,sBAAuBxB,KAAM,QACrD,CAAEhQ,GAAI,SAAUwR,IAAK,yCAA0CxB,KAAM,QACrE,CAAEhQ,GAAI,qBAAsBwR,IAAK,0BAA2BxB,KAAM,QAClE,CAAEhQ,GAAI,SAAUwR,IAAK,oCAAqCxB,KAAM,QAChE,CAAEhQ,GAAI,oBAAqBwR,IAAK,6BAA8BxB,KAAM,SAGpE0B,GAAyB,CACzB,CAAE1R,GAAI,SAAUwR,IAAK,SAAUxB,KAAK,WACpC,CAAEhQ,GAAI,SAAUwR,IAAK,SAAUxB,KAAK,WACpC,CAAEhQ,GAAI,UAAWwR,IAAK,UAAWxB,KAAK,WACtC,CAAEhQ,GAAI,UAAWwR,IAAK,UAAWxB,KAAK,WACtC,CAAEhQ,GAAI,UAAWwR,IAAK,UAAWxB,KAAK,WACtC,CAAEhQ,GAAI,UAAWwR,IAAK,UAAWxB,KAAK,WACtC,CAAEhQ,GAAI,SAAUwR,IAAK,SAAUxB,KAAK,WACpC,CAAEhQ,GAAI,SAAUwR,IAAK,SAAUxB,KAAK,YAGpC2B,GACJ,CAAC,KAAM,KAAM,KAAM,KACnB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,MAAMnN,KAAI,SAAAmE,GAAC,MAAK,CAAC3I,GAAI2I,EAAG6I,IAAK,GAAIxB,KAAK,kBAWpD4B,GAAgB,SAAClD,GACjB,IAAImD,EAVS,SAAC7B,GACd,OAAQA,GACJ,IAAK,OAAQ,OAAOyB,GACpB,IAAK,UAAW,OAAOC,GACvB,IAAK,cAAe,OAAOC,GAC3B,QAAS,MAAO,IAKPG,CAAWpD,EAASsB,MAC7B+B,EAAS,IAAIC,IAjGI,SAAClJ,GAEtB,IADA,IAAIhJ,EAAM,GACDF,EAAI,EAAGA,EAAIkJ,EAAIgG,MAAMzP,OAAQO,IAC9BkJ,EAAIyG,MAAM3P,IACVE,EAAIiC,KAAK+G,EAAIgG,MAAMlP,IAG3B,OAAOE,EA0FcmS,CAAiBvD,IASlCwD,EACIxD,EAASa,MAAM4C,OAAM,SAAAlP,GAAC,OAAIA,KACnB4O,EAEAA,EAAO3N,QAAO,SAAAsN,GACjB,IAAIY,EAbC,SAACpS,GAEd,IADA,IAAI2I,EAAI,GACC/I,EAAI,EAAGvB,EAAI2B,EAAGX,OAAQO,EAAIvB,GACjB,MAAV2B,EAAGJ,GAD2BA,IAElC+I,GAAK3I,EAAGJ,GAEZ,OAAO+I,EAOc0J,CAAWb,EAAIxR,IAC5B,OAAO+R,EAAOO,IAAIF,MAa9B,OARW,WACP,GAAoB,IAAhBF,EAAK7S,OACL,OAAOkS,GAEP,IAAInG,EAAMrM,KAAKC,MAAOD,KAAKE,SAAWiT,EAAK7S,QAC3C,OAAO6S,EAAK9G,KC5DxB,IAAImH,GAAe9S,MAAM,IAAIC,KAAK,GAClC6S,GAAa,GAAK,EAElB,IAAMC,GAAyB,CAC3BpB,aAAc,CACVtC,MAAO,CAAC,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,KAC7CS,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BS,KAAM,QAEVqB,gBAAiB,CACbvC,MAAO,CAAC,OAAQ,QAAS,QAAS,QAClCS,MAAO,CAAC,EAAE,EAAE,EAAE,GACdS,KAAM,WAEVsB,oBAAqB,CACjBxC,MAAO,CACH,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,MAEtBS,MAAOgD,GACPvC,KAAM,gBAIRyC,GAA4B,UAE5BC,GAAc,CAChBvR,KAAMpB,EAAUC,GAChB2S,KAAM,IAoBV,SAASC,KAAiE,IAAD,EAzFzE,SAAkBvD,EAAYwD,GAAkB,IAAD,EACL5F,IAAM6F,UAAS,WACjD,IACI,IAAMhC,EAAOiC,OAAOC,aAAaC,QAAQ5D,GACnC6D,EAAQpC,EAAOqC,KAAKtP,MAAMiN,GAAQ+B,EACxC,OAAgB,OAAVK,QAA8BE,IAAVF,GAAsD,IAA9B1P,OAAO6P,KAAKH,GAAO7T,OAC1DwT,EAEAK,EAEb,MAAOI,GAGL,OADAxS,QAAQqL,IAAImH,GACLT,MAb4B,mBACpCU,EADoC,KACvBC,EADuB,KAkC3C,MAAO,CAACD,EAfS,SAACE,GACd,IAEI,IAAMC,EACFD,aAAiBE,SAAWF,EAAMF,GAAeE,EAErDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQvE,EAAK8D,KAAKU,UAAUH,IAClD,MAAOJ,GAELxS,QAAQqL,IAAImH,MA4DQQ,CAAM,SAAUtB,IADyB,mBAC9D5C,EAD8D,KACtDmE,EADsD,OAEnC9G,IAAM6F,SAAiBL,IAFY,mBAE9DuB,EAF8D,KAEnDC,EAFmD,OAG7ChH,IAAM6F,SAAS/S,EAAUC,IAHoB,mBAG9DmB,EAH8D,KAGxD+S,EAHwD,OAI7CjH,IAAM6F,SAAgBJ,IAJuB,mBAI9DyB,EAJ8D,KAIxDC,EAJwD,KAQjEC,EADgBzC,GAAehC,EAAO0B,oBAC3BgD,GAAgBtU,GAC/BqU,EAAyB,UAAbA,EAAwB,KAAOA,EAT0B,MAW/CpH,IAAM6F,SAAiBuB,GAXwB,mBAW9D3M,EAX8D,KAWzD6M,EAXyD,OAY/BtH,IAAM6F,SAAkB,IAZO,mBAY9D0B,EAZ8D,KAYjDC,EAZiD,KAyCrE,MAAO,CA3BkB,CACrB7E,SAAQoE,YAAW7S,OAAMqT,cAAaL,OAAMzM,OAE/B,SAACgN,GAAuC,IAEzCC,EAMRD,EANA9E,OACWgF,EAKXF,EALAV,UACMa,EAINH,EAJAvT,KACa2T,EAGbJ,EAHAF,YACMO,EAENL,EAFAP,KACKa,EACLN,EADAhN,IAEAiN,GACAZ,EAAUY,GACVC,GACAX,EAAaW,GACbC,GACAX,EAAQW,GACRC,GACAL,EAAeK,GACfC,GACAX,EAAQW,GACRC,GACAT,EAAOS,KCnEJC,OA9Ef,SAAalI,GAAkB,IAAD,EACJ6F,KADI,mBACvBlD,EADuB,KAChBC,EADgB,KAExBuF,EDNN,SAAuBC,GAAsC,MAEjClI,IAAM6F,SAA4B,CAAC,GAAI,IAFN,mBAElD1R,EAFkD,KAE5CgU,EAF4C,KAIzD,SAASC,EAAT,GAAgD,IAAzBhG,EAAwB,EAAxBA,IACrBA,EAAMA,EAAIiG,cAENH,EAAWtO,eAAewI,IAC5B+F,GAAS,mCAAKvV,GAAL,iBAAc,CAACsV,EAAW9F,GAAMxP,EAAM,MAYnD,OAPAoN,IAAME,WAAU,WAGd,OAFA4F,OAAOwC,iBAAiB,UAAWF,GAE5B,WACLtC,OAAOyC,oBAAoB,UAAWH,MAEvC,IACIjU,ECdKqU,CAAc5W,GAExB6W,EAAY9D,GAAelC,EAAME,OAAOwB,cACxCuE,EAAiB/D,GAAelC,EAAME,OAAOyB,iBAG7CiD,EAAgB1C,GAAelC,EAAME,OAAO0B,qBAEhDnE,qBAAW,WAAO,IAAD,cACK+H,EADL,GACVU,EADU,UAEf,GAAiB,KAAbA,EAEJ,GAAoB,MAAhBA,EAAS,GACX,GAAiB,cAAbA,EAA0B,CAE5B,IAAIC,EAAwBF,IAExBnE,EAAgBkE,IAEhBI,EAAUD,EAAYrE,IAAM,IAAMrS,EAAY,CAAC,IAAK,GAAI,KAAM,OAAS,IAAMqS,EAAIA,IACjF7P,EAAkBF,EAAK4C,IAAI5C,EAAKoC,MAAMiS,IAItC3U,EAAO4F,EAASuB,kBACpBnH,EAAOpB,EAAUuB,MAAMH,EAAMQ,GAG7B,IAAI+F,EAAe4M,IAAgBtU,GAGnC2P,EAAU,CACRxO,OACAqT,YAAa,GACbR,UAAW,UACXG,KAAM,CACJhT,OACAwR,KAAM,CAACkD,EAAarE,IAEtB9J,YAEoB,UAAbkO,GACTjG,EAAU,CACRxO,KAAMuO,EAAMyE,KAAKhT,KACjBqT,YAAa,GACbR,UAAW,iBAKf,GAAwB,YAApBtE,EAAMsE,UAAyB,CAEjC,IAAIrS,EAAQF,EAAKoC,MAAM+R,GACvB,GAAIjU,EAAMtC,OAAS,EAAG,CACpB,IAAI+B,EAAOO,EAAM,GACbR,EAAOpB,EAAUuB,MAAMoO,EAAMvO,KAAMC,GAEnCsT,EADc3N,EAASkB,eAAe9G,GACJ,SAAW,UACjDwO,EAAU,CACRxO,KAAMpB,EAAUuB,MAAMoO,EAAMvO,KAAMC,GAClCoT,YAAY,GAAD,mBAAM9E,EAAM8E,aAAZ,CAAyBpT,IACpC4S,UAAWU,QAKlB,CAACQ,IApEwB,IAsEvB/T,EAAQuO,EAARvO,KAIL,OAFc4D,EAAYuB,WAAWnF,GAGnC,kBAAC,GAAD,CAASuO,MAAOA,EAAOC,SAAUA,KC5EjBxL,QACW,cAA7B4O,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2D,wCCGSrI,GAjBDsI,aAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAER/C,MAAO,CACL+C,KAAME,KAAIC,MAEZC,WAAY,CACVC,QAAS,WCPfC,IAAS7K,OACL,kBAAC8K,GAAA,EAAD,CAAehJ,MAAOA,IAEpB,kBAACiJ,GAAA,EAAD,MACA,kBAAC,GAAD,OAEFC,SAASC,eAAe,SFkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.763ea0f8.chunk.js","sourcesContent":["export enum Face {\n    U = 0, D, F, B, L, R\n}\nconst U = Face.U;\nconst D = Face.D;\nconst F = Face.F;\nconst B = Face.B;\nconst L = Face.L;\nconst R = Face.R;\nexport {U, D, F, B, L, R};\n\nexport enum Typ {\n    C = 0, E, T\n}\nconst C = Typ.C;\nconst E = Typ.E;\nconst T = Typ.T;\nexport {C, E, T}\n\nexport type CubieT = {\n    co: Array<number>,\n    cp: Array<number>,\n    eo: Array<number>,\n    ep: Array<number>,\n    tp: Array<number>\n}\n\nexport type FaceletCube = Array<string>\n\nexport type CornerCoord = [Face, Face, Face]\nlet corners_coord : Array<CornerCoord> = [\n    [U,F,L], [U,L,B], [U,B,R], [U,R,F],\n    [D,L,F], [D,B,L], [D,R,B], [D,F,R]\n]\n\nexport type EdgeCoord = [Face, Face]\nlet edges_coord : Array<EdgeCoord> = [\n    [U,F], [U,L], [U,B], [U,R],\n    [D,F], [D,L], [D,B], [D,R],\n    [F,L], [B,L], [B,R], [F,R],\n]\nexport {corners_coord, edges_coord}\n\nexport type PermChg = [number, number]\nexport type OriChg = number\n\nexport type MoveT = {\n    cpc: Array<PermChg>,\n    coc: Array<OriChg>,\n    epc: Array<PermChg>,\n    eoc: Array<OriChg>,\n    tpc: Array<PermChg>,\n    name: string\n}\n\nlet u : MoveT = {\n    cpc: [[0, 1], [1, 2], [2, 3], [3, 0]],\n    coc: [0, 0, 0, 0],\n    epc: [[0, 1], [1, 2], [2, 3], [3, 0]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"U\"\n}\n\nlet f : MoveT = {\n    cpc: [[0, 3], [3, 7], [7, 4], [4, 0]],\n    coc: [1, 2, 1, 2],\n    epc: [[0, 11], [11, 4], [4, 8], [8, 0]],\n    eoc: [1, 1, 1, 1],\n    tpc: [],\n    name: \"F\",\n}\n\nlet r : MoveT = {\n    cpc: [[3, 2], [2, 6], [6, 7], [7, 3]],\n    coc: [1, 2, 1, 2],\n    epc: [[3, 10], [10, 7], [7, 11], [11, 3]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"R\",\n}\n\nlet l : MoveT = {\n    cpc: [[0, 4], [4, 5], [5, 1], [1, 0]],\n    coc: [2, 1, 2, 1],\n    epc: [[1, 8], [8, 5], [5, 9], [9, 1]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"L\",\n}\n\nlet d : MoveT = {\n    cpc: [[4, 7], [7, 6], [6, 5], [5, 4]],\n    coc: [0, 0, 0, 0],\n    epc: [[4, 7], [7, 6], [6, 5], [5, 4]],\n    eoc: [0, 0, 0, 0],\n    tpc: [],\n    name: \"D\",\n}\n\nlet b : MoveT = {\n    cpc: [[1, 5], [5, 6], [6, 2], [2, 1]],\n    coc: [2, 1, 2, 1],\n    epc: [[2, 9], [9, 6], [6, 10], [10, 2]],\n    eoc: [1, 1, 1, 1],\n    tpc: [],\n    name: \"B\",\n}\n\nlet m : MoveT = {\n    cpc: [],\n    coc: [],\n    epc: [[0, 4], [4, 6], [6, 2], [2, 0]],\n    eoc: [1, 1, 1, 1],\n    tpc: [[0, 2], [2, 1], [1, 3], [3, 0]],\n    name: \"M\",\n}\n\nlet e : MoveT = {\n    cpc: [],\n    coc: [],\n    epc: [[8, 9], [9, 10], [10, 11], [11, 8]],\n    eoc: [1, 1, 1, 1],\n    tpc: [[2, 4], [4, 3], [3, 5], [5, 2]],\n    name: \"E\",\n}\n\nexport {u, d, f, b, l, r, m, e}\n\nexport type FaceletT = Array<[number, number, Typ]>\n\nlet u_face : FaceletT = [\n    [1, 0, C], [2, 0, E], [2, 0, C],\n    [1, 0, E], [0, 0, T], [3, 0, E],\n    [0, 0, C], [0, 0, E], [3, 0, C]\n  ]\n\nlet f_face : FaceletT = [\n    [0, 1, C], [0, 1, E], [3, 2, C],\n    [8, 0, E], [2, 0, T], [11,0, E],\n    [4, 2, C], [4, 1, E], [7, 1, C]\n]\n\nexport {u_face, f_face}\n\nexport type FaceletCubeT = Array<Array<Face>>\n\n// A Cube can be in two representations: cubieCube or faceletCube\n\nlet color_map =`\\\n   UUU\n   UUU\n   UUU\nLLLFFFRRRBBB\nLLLFFFRRRBBB\nLLLFFFRRRBBB\n   DDD\n   DDD\n   DDD`\n\nexport {color_map}\n\nconst defaultKeyMapping = {\n    \"I\": \"R\",\n    \"K\": \"R'\",\n    \"W\": \"B\",\n    \"O\": \"B'\",\n    \"S\": \"D\",\n    \"L\": \"D'\",\n    \"D\": \"L\",\n    \"E\": \"L'\",\n    \"J\": \"U\",\n    \"F\": \"U'\",\n    \"H\": \"F\",\n    \"G\": \"F'\",\n    \";\": \"y\",\n    \"A\": \"y'\",\n    \"U\": \"r\",\n    \"R\": \"l'\",\n    \"M\": \"r'\",\n    \"V\": \"l\",\n    \"T\": \"x\",\n    \"Y\": \"x\",\n    \"N\": \"x'\",\n    \"B\": \"x'\",\n    \".\": \"M'\",\n    \"X\": \"M'\",\n    \"5\": \"M\",\n    \"6\": \"M\",\n    \"P\": \"z\",\n    \"Q\": \"z'\",\n    \"Z\": \"d\",\n    \"C\": \"u'\",\n    \",\": \"u\",\n    \"/\": \"d'\",\n    \"ENTER\": \"#scramble\",\n    \" \": \"#redo\",\n  }\n\nexport {defaultKeyMapping}","let rand_int = (r: number) => {\n    return Math.floor(Math.random() * r)\n}\n\nlet rand_incl = (l: number, r: number) => {\n    return rand_int(r - l + 1) + l;\n}\nlet rand_choice = function<T>(arr: T[]) {\n    return arr[rand_int(arr.length)]\n}\n\nlet rand_shuffle = function<T>(arr: T[]) {\n    for (let i = 0, l = arr.length; i < l - 1; i++) {\n        let j = rand_incl(i, l - 1)\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp\n    }\n    return arr\n}\n\nlet getParity = (perm: number[]) => {\n    let visited = Array(perm.length).fill(false)\n    let follow = (i: number, cnt: number) : number => {\n        if (visited[i]) {\n            return 0\n        } else {\n            visited[i] = 1\n            return follow(perm[i], cnt + 1)\n        }\n    }\n    let res = 0\n    for (let x of perm) {\n        res += follow(x, 0)\n    }\n    return res\n}\nexport {rand_int, rand_choice, rand_shuffle, getParity}","import { MoveT, CubieT, OriChg, PermChg } from \"./Defs\";\nimport { u, d, f, b, l, r, m, e } from \"./Defs\";\nimport { FaceletT, FaceletCubeT, corners_coord, edges_coord, u_face, f_face, color_map } from \"./Defs\";\nimport { Typ, Face, C, E, T, U, D, F, B, L, R } from \"./Defs\";\nimport { rand_int, rand_shuffle, getParity, rand_choice } from \"./Math\";\n\nconst C_MOD = 3;\nconst E_MOD = 2;\nconst T_MOD = 1;\n\nlet CubieCube = (function () {\n    /*\n    Cube should be represented as a simple struct {cp, eo, ep, eo, tp}.\n    The addition of tp is not necessary, but helps us deal with slice moves in Roux during search and simcube.\n    */\n\n    /*\n    We will follow the programming pattern of returning an object with all the public functions.\n    These functions will mostly have no side effects, i.e. no 'this' will be used. instead, the object must pass itself\n    in as the first argument. This makes sense because cube moves usually changes the state representation by a lot,\n    and re-assigning the result to 'this' would be cumbersome.\n    */\n    let id: CubieT = {\n        // init state\n        cp: [0, 1, 2, 3, 4, 5, 6, 7],\n        co: [0, 0, 0, 0, 0, 0, 0, 0],\n        ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        tp: [0, 1, 2, 3, 4, 5] // UD FB LR\n    }\n\n    let apply_partial = (o: Array<number>, p: Array<number>, oc: Array<OriChg>, pc: Array<PermChg>, mod: number) => {\n        let o_new = [...o];\n        let p_new = [...p];\n        console.assert(oc.length === pc.length)\n\n        for (let i = 0; i < oc.length; i++) {\n            //let [src, dst] = pc[i];\n            let src = pc[i][0], dst = pc[i][1];\n            p_new[dst] = p[src];\n            o_new[dst] = (o[src] + oc[i]) % mod;\n        }\n        return [o_new, p_new]\n    }\n\n    let apply_one = (cube: CubieT, move: MoveT) => {\n        let [co, cp] = apply_partial(cube.co, cube.cp, move.coc, move.cpc, C_MOD)\n        let [eo, ep] = apply_partial(cube.eo, cube.ep, move.eoc, move.epc, E_MOD)\n        let toc = Array(move.tpc.length).fill(0)\n        let [_, tp] = apply_partial([0, 0, 0, 0, 0, 0], cube.tp, toc, move.tpc, T_MOD)\n        return ({ co, cp, eo, ep, tp })\n    }\n\n    let apply = (cube: CubieT, move: MoveT | Array<MoveT>) => {\n        if (Array.isArray(move)) {\n            for (let i = 0; i < move.length; i++) {\n                cube = apply_one(cube, move[i])\n            }\n            return cube\n        } else {\n            return apply_one(cube, move)\n        }\n    }\n\n    let from_move = (move: MoveT | Array<MoveT>) => {\n        return apply(id, move)\n    }\n\n\n    return {\n        id,\n        apply,\n        from_move\n    }\n\n})()\n\n\n/* Moves */\n/* We will generate all the moves based on the base moves and rotations, and return them in an array */\nlet Move = function () {\n    let from_cube = (cube: CubieT, name: string): MoveT => {\n        let get_change = (p: Array<number>, o: Array<number>, acc_p: Array<PermChg>, acc_o: Array<OriChg>) => {\n            for (let i = 0; i < p.length; i++) {\n                if (i === p[i] && o[i] === 0) {\n                } else {\n                    acc_p.push([p[i], i]);\n                    acc_o.push(o[i]);\n                }\n            }\n        }\n        let cpc: Array<PermChg> = [];\n        let coc: Array<OriChg> = [];\n        let epc: Array<PermChg> = [];\n        let eoc: Array<OriChg> = [];\n        let tpc: Array<PermChg> = [];\n        get_change(cube.cp, cube.co, cpc, coc);\n        get_change(cube.ep, cube.eo, epc, eoc);\n        get_change(cube.tp, [0, 0, 0, 0, 0, 0], tpc, []);\n        return {\n            cpc, coc, epc, eoc, tpc, name\n        }\n    }\n    let from_moves = (moves: Array<MoveT>, name: string): MoveT => {\n        let move = from_cube(CubieCube.apply(CubieCube.id, moves), name)\n        return move\n    }\n    let make_rot_set = (move: MoveT): Array<MoveT> => {\n        return [move,\n            from_moves([move, move], move.name + \"2\"),\n            from_moves([move, move, move], move.name + \"'\")\n        ]\n    }\n    let add_auf = (moves: Array<MoveT>, auf_moves?: Array<MoveT | MoveT[]>): MoveT[] => {\n        auf_moves = auf_moves || [[], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"]]\n        let auf_move = auf_moves[Math.floor(Math.random() * auf_moves.length)]\n        if (Array.isArray(auf_move)) {\n            return moves.concat(auf_move)\n        } else {\n            moves.push(auf_move)\n            return moves\n        }\n    }\n\n    let generate_base_moves = () => {\n        let us = make_rot_set(u);\n        let fs = make_rot_set(f)\n        let rs = make_rot_set(r)\n        let ls = make_rot_set(l)\n        let ds = make_rot_set(d)\n        let bs = make_rot_set(b)\n        let ms = make_rot_set(m)\n        let es = make_rot_set(e);\n\n        let rw = from_moves([r, ms[2]], \"r\")\n        let rws = make_rot_set(rw)\n        let lw = from_moves([l, m], \"l\")\n        let lws = make_rot_set(lw)\n        let uw = from_moves([u, e], \"u\")\n        let uws = make_rot_set(uw)\n\n        let x = from_moves([r, ls[2], ms[2]], \"x\")\n        let xs = make_rot_set(x)\n        let y = from_moves([u, e, ds[2]], \"y\")\n        let ys = make_rot_set(y)\n        let z = from_moves([x, y, x, x, x], \"z\")\n        let zs = make_rot_set(z)\n        let moves = [\n            us, fs, rs, ls, ds, bs, ms, es,\n            xs, ys, zs,\n            rws, lws, uws\n        ].flat()\n        let moves_dict: { [key: string]: MoveT } = Object.create({})\n        moves.forEach(m => moves_dict[m.name] = m)\n        return moves_dict\n    }\n\n    let all_moves = generate_base_moves()\n    let parse = (str: string) => {\n        str = str.replace(/2'/g, \"2\").replace(/2/g, \"2 \").replace(/'/g, \"' \");\n        let tokens = str.split(/\\s+/).filter(Boolean)\n        let res: MoveT[] = []\n        for (let token of tokens) {\n            let move = all_moves[token]\n            if (move) {\n                res.push(move)\n            } else {\n                return []\n                //throw Error(\"Invalid move sequence \" + move)\n            }\n        }\n        return res\n    }\n\n    let inv = (move: MoveT | MoveT[]): MoveT[] => {\n        if (Array.isArray(move)) {\n            return move.slice(0).reverse().map(inv).flat()\n        } else {\n            let name: string\n            switch (move.name[move.name.length - 1]) {\n                case \"'\": name = move.name.slice(0, move.name.length - 1); break\n                case \"2\": name = move.name; break\n                default: name = move.name + \"'\"\n            }\n            return [all_moves[name]]\n        }\n    }\n\n    let to_string = (move: MoveT | MoveT[]): string => {\n        if (Array.isArray(move)) {\n            return move.map(to_string).join(\" \")\n        } else {\n            return move.name\n        }\n    }\n\n    return {\n        all: all_moves,\n        parse: parse,\n        inv: inv,\n        add_auf: add_auf,\n        to_string: to_string\n    }\n}()\n\n/* Faces */\nlet FaceletCube = function () {\n    let mult_move = (face: FaceletT, move: MoveT): FaceletT => {\n        let face_new: FaceletT = [...face]\n        let mod_for_typ = (typ: Typ) => {\n            switch (typ) {\n                case C: return 3;\n                case E: return 2;\n                case T: return 1\n            }\n        }\n        let work = (p: PermChg, o: number, typ: Typ) => {\n            let mod = mod_for_typ(typ)\n            let [p1, p2] = p\n            for (let i = 0; i < face.length; i++) {\n                let [p_curr, o_curr, typ_curr] = face[i];\n                if (typ_curr === typ && p_curr === p1) {\n                    face_new[i] = [p2, (o_curr + o) % mod, typ]\n                }\n            }\n        }\n        for (let i = 0; i < move.cpc.length; i++) {\n            work(move.cpc[i], move.coc[i], C)\n        }\n        for (let i = 0; i < move.epc.length; i++) {\n            work(move.epc[i], move.eoc[i], E)\n        }\n        for (let i = 0; i < move.tpc.length; i++) {\n            work(move.tpc[i], 0, T)\n        }\n        return face_new\n    }\n    let from_cubie_partial = (cube: CubieT, facelet: FaceletT) => {\n        let color_of_c = (p: number, o1: number, o2: number) =>\n            corners_coord[p][(3 - o1 + o2) % 3];\n        let color_of_e = (p: number, o1: number, o2: number) =>\n            edges_coord[p][(2 - o1 + o2) % 2];\n        let color_of_t = (p: number) => [U, D, F, B, L, R][p];\n        return facelet.map(([p, o, typ]) => {\n            if (typ === C) {\n                return color_of_c(cube.cp[p], cube.co[p], o)\n            } else if (typ === E) {\n                return color_of_e(cube.ep[p], cube.eo[p], o)\n            } else if (typ === T) {\n                return color_of_t(cube.tp[p])\n            } else {\n                throw Error(\"unidentified type \" + typ)\n            }\n        })\n    }\n    let moves = Move.all\n    let generate_base_facelets = () => {\n        let d_face = mult_move(f_face, moves[\"x'\"])\n        let l_face = mult_move(f_face, moves[\"y\"])\n        let r_face = mult_move(f_face, moves[\"y'\"])\n        let b_face = mult_move(f_face, moves[\"y2\"])\n        return {\n            d_face, l_face, r_face, b_face\n        }\n    }\n    let { d_face, l_face, r_face, b_face } = generate_base_facelets()\n\n    let from_cubie = (cube: CubieT): FaceletCubeT => {\n\n        //console.log(\"converting from cube\", cube)\n        let faces = [u_face, d_face, f_face, b_face, l_face, r_face]\n        let colors = faces.map((facelet) => from_cubie_partial(cube, facelet))\n        return colors\n    }\n\n    let to_unfolded_cube_str = (faceletCube: FaceletCubeT): String => {\n        let face_count = [0, 0, 0, 0, 0, 0];\n        let str_face_map: { [key: string]: Face } = {\n            \"U\": U, \"D\": D, \"F\": F, \"B\": B, \"L\": L, \"R\": R\n        }\n        let face_str_map = \"UDFBLR\"\n        let color_cube = \"\"\n        for (let i = 0; i < color_map.length; i++) {\n            let face_char = color_map[i];\n            if (str_face_map.hasOwnProperty(face_char)) {\n                let face: number = str_face_map[face_char] as number;\n                let count = face_count[face];\n                let color = faceletCube[face][count]\n                color_cube += face_str_map[color]\n                face_count[face] += 1;\n            } else {\n                color_cube += color_map[i];\n            }\n        }\n        return color_cube;\n    }\n\n    return {\n        from_cubie,\n        to_unfolded_cube_str\n    }\n}()\n\ntype Mask = {\n    co?: number[],\n    eo?: number[],\n    cp: number[],\n    ep: number[],\n}\n\n\nlet CubeUtil = (() => {\n    let is_mask_solved = (cube: CubieT, { co, eo, cp, ep }: Mask, premove: (MoveT | MoveT[])[]) => {\n        //let moves = [ [], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"] ]\n        co = co || cp\n        eo = eo || ep\n        for (let move of premove) {\n            let cube1 = CubieCube.apply(cube, move)\n            let solved = true\n            for (let i = 0; i < 8 && solved; i++) {\n                if ((co[i] && cube1.co[i] !== 0)\n                    || (cp[i] && cube1.cp[i] !== i)) {\n                    solved = false;\n                }\n            }\n            for (let i = 0; i < 12 && solved; i++) {\n                if ((eo[i] && cube1.eo[i] !== 0)\n                    || (ep[i] && cube1.ep[i] !== i)) {\n                    solved = false;\n                }\n            }\n            if (solved) return true;\n        }\n        return false;\n    }\n    let cmll_mask: Mask = {\n        cp: [1, 1, 1, 1, 1, 1, 1, 1],\n        ep: [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],\n    }\n    let u_premove = [[], Move.all[\"U\"], Move.all[\"U'\"], Move.all[\"U2\"]]\n    let m_premove = [[], Move.all[\"M\"], Move.all[\"M'\"], Move.all[\"M2\"]]\n    let m2_premove = [[], Move.all[\"M2\"]]\n    let m2u_premove = [[], Move.parse(\"U\"), Move.parse(\"U'\"), Move.parse(\"U2\"),\n    Move.parse(\"M2\"), Move.parse(\"M2U\"), Move.parse(\"M2U'\"), Move.parse(\"M2U2\")]\n    let is_cmll_solved = (cube: CubieT) => {\n        return is_mask_solved(cube, cmll_mask, u_premove)\n    }\n\n    let get_random_with_mask = ({ co, eo, cp, ep }: Mask): CubieT => {\n        co = co || cp\n        eo = eo || ep\n        // get_random -- figure out which masks are 0, and assign random to these\n        let random_ori = (ori_mask: number[], typ: Typ) => {\n            let ori = Array(ori_mask.length).fill(0)\n            let mod = (typ === C) ? 3 : 2\n            let sum: number\n            do {\n                sum = 0\n                for (let i in ori_mask) {\n                    if (ori_mask[i] === 0) {\n                        ori[i] = rand_int(mod)\n                        sum += ori[i]\n                    }\n                }\n            } while (sum % mod > 0)\n            return ori\n        }\n        let random_perm = (perm_mask: number[]) => {\n            let perm: number[] = Array(perm_mask.length).fill(0)\n            let undecided: number[] = []\n            for (let i = 0; i < perm_mask.length; i++) {\n                if (perm_mask[i] === 0) {\n                    undecided.push(i)\n                } else {\n                    perm[i] = i\n                }\n            }\n            rand_shuffle(undecided)\n            for (let i = 0, cnt = 0; i < perm_mask.length; i++) {\n                if (perm_mask[i] === 0) {\n                    perm[i] = undecided[cnt]\n                    cnt += 1\n                }\n            }\n            return perm\n        }\n        let cp_rand, ep_rand, par\n        do {\n            [cp_rand, ep_rand] = [random_perm(cp), random_perm(ep)]\n            par = (getParity(cp_rand) + getParity(ep_rand)) & 1\n        } while (par > 0)\n\n        return {\n            co: random_ori(co, C),\n            cp: cp_rand,\n            eo: random_ori(eo, E),\n            ep: ep_rand,\n            tp: [0, 1, 2, 3, 4, 5]\n        }\n    }\n\n    let get_random_l10p = (): CubieT => {\n        let cube = get_random_with_mask(cmll_mask)\n        return CubieCube.apply(cube, rand_choice(m2_premove))\n    }\n\n\n\n    const ori_to_color_scheme = (() => {\n        // UDFBLR\n        // specify the colors for uf\n        // how to do this?\n        const arr: [string, number][] = [\n            [\"G\", 0x00ff00],\n            [\"B\", 0x0000ff],\n            [\"R\", 0xff0000],\n            [\"O\", 0xff8800],\n            [\"Y\", 0xffff00],\n            [\"W\", 0xffffff]\n        ]\n        const colorMap = new Map<string, number>(arr)\n        // UDFBLR from UF\n        // INFERR UFR from UF?\n        const valid_schemes = [\n            \"WYGBOR\",\n            \"WYBGRO\",\n            \"WYROGB\",\n            \"WYORBG\",\n            \"YWGBRO\",\n            \"YEBGOR\",\n            \"YWROBG\",\n            \"YWORGB\",\n\n            \"GBWYRO\",\n            \"GBYWOR\",\n            \"GBROYW\",\n            \"GBORWY\",\n            \"BGWYOR\",\n            \"BGYWRO\",\n            \"BGROWY\",\n            \"BGORYW\",\n\n            \"ORWYGB\",\n            \"ORYWBG\",\n            \"ORGBWY\",\n            \"ORBGYW\",\n            \"ROWYBG\",\n            \"ROYWGB\",\n            \"ROGBYW\",\n            \"ROBGWY\",\n        ]\n        const valid_scheme_mapper: { [key: string]: number[] } = Object.create({})\n        valid_schemes.forEach(s => { valid_scheme_mapper[s[0] + s[2]] = s.split('').map(ch => colorMap.get(ch)!) })\n\n        const mapper = (sel: string) => {\n            return valid_scheme_mapper[sel]\n        }\n\n        return mapper\n    })()\n\n    return {\n        is_cmll_solved,\n        get_random_l10p,\n        ori_to_color_scheme\n    }\n})()\n\nexport { CubieCube, Move, FaceletCube, CubeUtil }\n","import React, { useEffect } from 'react'\n\nimport {CubieCube, Move, FaceletCube} from \"./CubeLib\";\nimport {CubieT, FaceletCubeT, Face} from \"./Defs\";\nimport { deflateRaw } from 'zlib';\nimport { Color } from 'csstype';\nimport * as THREE from 'three';\n\ntype Config = {cube: FaceletCubeT, width: number, height: number, colorScheme: Array<number>}\n\n/*\nHow to propagate control of keypress ..? maybe not here, in the app.\n\nLet's look at click analogy: if a user click on sub-component,\nthat message should be propagated upwards to the parent.\n\nThat is, \"keydown\" should transform to some kind of message, e.g. the resulting cube state\nto be passed to the App, which then decides whether to trigger state change or let the cube keep being solved\n\n*/\n\n\ntype AxesInfo = [THREE.Vector3, THREE.Euler]\nconst TAU = Math.PI * 2;\nconst axesInfo : [THREE.Vector3, THREE.Euler][] = [\n    [new THREE.Vector3( 0,  1,  0), new THREE.Euler(-TAU/4,  0,  0)],\n    [new THREE.Vector3( 0, -1,  0), new THREE.Euler( TAU/4,  0,  0)],\n    [new THREE.Vector3( 0,  0,  1), new THREE.Euler( 0,  0,      0)],\n    [new THREE.Vector3( 0,  0, -1), new THREE.Euler( 0,  TAU/2,  0)],\n    [new THREE.Vector3(-1,  0,  0), new THREE.Euler( 0, -TAU/4,  0)],\n    [new THREE.Vector3( 1,  0,  0), new THREE.Euler( 0,  TAU/4,  0)],\n];\n\nconst setup = function(width: number, height: number, colorScheme?: Array<number>, mode?: string) {\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(70, width / height, 0.1, 1000)\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const geo = new THREE.PlaneGeometry(0.9 * 2, 0.9 * 2)\n    const geo_border = new THREE.PlaneGeometry(1 * 2, 1 * 2)\n\n    //let colorScheme_ = colorScheme || [0xffffff, 0xffff00,  0x00ff00, 0x0000ff, 0xff8800, 0xff0000]\n\n    mode = mode || \"FRU\"\n\n    if (mode === \"FRU\")\n        camera.position.copy(new THREE.Vector3(2.2 / 1.1, 3/1.1, 3/1.1))\n    else\n        camera.position.copy(new THREE.Vector3(0 / 1.1, 3/1.1, 3/1.1))\n\n    //camera.position.copy(new THREE.Vector3(2.5, 5, 5))\n    camera.lookAt(new THREE.Vector3(0, 0, 0))\n\n\n    let stickers_tmpl: THREE.Mesh[] , stickerwrap_tmpl: THREE.Mesh\n\n    function updateColorScheme(colorScheme: Array<number>) {\n        let colorScheme_ = colorScheme\n        console.log(\"update color scheme \", colorScheme_)\n        let materials = Array(6).fill(0).map( (_, i) => new THREE.MeshBasicMaterial({ color: colorScheme_[i], side:THREE.DoubleSide}))\n        let materials_border = new THREE.MeshBasicMaterial({ color: 0x000000, side:THREE.DoubleSide })\n        stickers_tmpl = materials.map( (mat) => {\n            let mesh = new THREE.Mesh(geo, mat)\n            mesh.setRotationFromEuler(axesInfo[0][1])\n            return mesh\n        })\n        stickerwrap_tmpl = (() => {\n            let mesh = new THREE.Mesh(geo_border, materials_border)\n            mesh.setRotationFromEuler(axesInfo[0][1])\n            return mesh\n        })()\n    }\n\n    function drawCube(faces: FaceletCubeT) : THREE.Group {\n        const cube = new THREE.Group();\n        for (let i = 0; i < 6; i++) {\n            const cubie = new THREE.Group();\n            const rot = new THREE.Matrix4().makeRotationFromEuler(axesInfo[i][1]);\n            const rot1 = new THREE.Matrix4().makeRotationFromEuler(axesInfo[1][1]);\n            cubie.setRotationFromMatrix(rot.multiply(rot1))\n            for (let z = -1; z <= 1; z++) {\n                for (let x = -1; x <= 1; x++) {\n                    let idx = (z + 1) * 3 + (x + 1)\n\n                    const curr_tmpl = stickers_tmpl[faces[i][idx]]\n                    const sticker = curr_tmpl.clone()\n                    const stickerwrap = stickerwrap_tmpl.clone()\n\n                    const eps = 0.04\n                    sticker.position.copy(new THREE.Vector3(x * 2, 3, z * 2))\n                    stickerwrap.position.copy(new THREE.Vector3(x * 2, 3 - eps, z * 2))\n\n                    if (i === 4 /*|| i === 3 || i === 1 */ ||  (i === 5 && mode === \"UF\")) {\n                        const stickerhint = curr_tmpl.clone()\n                        stickerhint.position.copy(new THREE.Vector3(x * 2, 3 + 3 + 3, z * 2))\n                        cubie.add(stickerhint)\n                    }\n                    cubie.add(sticker)\n                    cubie.add(stickerwrap)\n                }\n            }\n            cube.add(cubie)\n        }\n        cube.scale.set(1/3, 1/3, 1/3)\n        return cube\n    }\n\n    let cubeG = new THREE.Group();\n    scene.add(cubeG)\n    const updateCube = (cube: FaceletCubeT) => {\n        scene.remove(cubeG)\n        cubeG = drawCube(cube)\n        scene.add(cubeG)\n    }\n\n    const renderScene = () => {\n        renderer.render(scene, camera)\n    }\n\n    const updateWidthHeight = (width: number, height: number) => {\n        renderer.setSize(width, height, false);\n        renderer.setClearColor('#fafafa')\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n    }\n\n\n    const cleanup = () => {\n        geo.dispose()\n        //materials.forEach(m => m.dispose())\n    }\n\n    let defaultColorScheme = [ 0x00ff00, 0x0000ff, 0xff0000,0xff8800,0xffff00, 0xffffff]\n    updateWidthHeight(width, height)\n    //updateColorScheme(defaultColorScheme)\n    //updateCube(FaceletCube.from_cubie( CubieCube.id))\n\n\n    return {\n        domElement: () => {return renderer.domElement},\n        updateCube,\n        renderScene,\n        updateWidthHeight,\n        cleanup,\n        updateColorScheme\n    }\n}\n\nconst cubeSim = setup(370, 370)\n\nlet previousProps : Config | null = null\n\nfunction CubeSim(props: Config) {\n  const mount = React.useRef<HTMLDivElement | null>(null)\n\n  //let width = mount.current!.clientWidth\n  // we need to simulate update logic to our cubesim object\n  if (previousProps) {\n      console.log(props.colorScheme, previousProps.colorScheme)\n      if (props.colorScheme !== previousProps.colorScheme)\n        cubeSim.updateColorScheme(props.colorScheme)\n\n      // color scheme must precede cube\n      if (props.cube !== previousProps.cube)\n        cubeSim.updateCube(props.cube)\n\n      cubeSim.renderScene()\n      console.log(\"updated cube\")\n  }\n\n  useEffect( () => {\n    let dom = cubeSim.domElement()\n    let current = mount.current!\n    current.appendChild(dom)\n\n    cubeSim.updateColorScheme(props.colorScheme)\n    cubeSim.updateCube(props.cube)\n    cubeSim.renderScene()\n    console.log(\"render scnee\")\n\n    return () => {\n        current.removeChild( dom )\n    }\n  }, [])\n\n  // we need a deep copy here, i suppose??\n  // no we don't not this problem\n  previousProps = props\n\n  return <div\n      ref = {mount}\n      style = {{width : props.width, height : props.height}}\n  />;\n}\n\nexport default CubeSim","import React, { useEffect } from 'react'\nimport CubeSim from './CubeSim'\nimport { FaceletCube, CubieCube, Move, CubeUtil } from './CubeLib';\nimport { CubieT, MoveT } from \"./Defs\";\nimport { AppState, Selector, AppStateSetter, Config } from \"./Types\";\n\nimport { Checkbox, AppBar, Typography, Toolbar } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport 'typeface-roboto';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 420,\n  },\n  title : {\n      flexGrow: 1,\n  }\n}))\n\nfunction SelectorGroupPanel(props: { selector: Selector, handleChange: (x: string) => () => void }) {\n  let { selector, handleChange } = props\n  var makeBox = (name: string, checked: boolean) => {\n    return (\n      <FormControlLabel\n        control={\n          <Checkbox checked={checked} onChange={handleChange(name)} />\n        }\n        label={name}\n        color=\"primary\"\n        key={name}\n      />)\n  }\n  return (\n    <FormGroup row>\n      {selector.names.map( (name, i) => makeBox(name, !!selector.flags[i]) ) }\n    </FormGroup>\n  );\n}\n\n// TODO: Write getter and setter for config items, and also write handlers that map to setters\nfunction AppView(props: { state: AppState, setState: AppStateSetter } ) {\n  //const [locations, setLocations] = React.useState([])\n  let classes = useStyles()\n  let { state, setState } = props\n  let { cube, config } = state\n  let facelet = FaceletCube.from_cubie(cube)\n  let cmll_solved = CubeUtil.is_cmll_solved(cube)\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const handleSelectorChange = (kind: string) => (name: string) => () => {\n    if (kind === \"cmll\") {\n    }\n    let config_ = config as any\n    let {names, flags} = config_[kind]\n\n    let new_flags = [...flags]\n    //\n    let idx = names.indexOf(name)\n    if (0 <= idx && idx < new_flags.length) {\n      new_flags[idx] = 1 - new_flags[idx]\n    }\n\n    let new_config = {...config}\n    let new_config_unsafe = (new_config as any)\n    new_config_unsafe[kind].flags = new_flags;\n\n\n    //console.log(\"setting new config to \")\n\n    setState({\n      config: new_config\n    })\n  }\n\n  return (\n    <main>\n      <AppBar position=\"static\">\n      <Toolbar>\n        {/*\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>\n        */}\n        <Typography variant=\"h6\" className={classes.title}>\n          CMLL Trainer\n        </Typography>\n      </Toolbar>\n\n      </AppBar>\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12} md={10} lg={8} >\n                <Paper className={fixedHeightPaper}>\n                  <Box margin=\"auto\">\n                  <CubeSim\n                    width={400}\n                    height={400}\n                    cube={facelet}\n                    colorScheme={CubeUtil.ori_to_color_scheme(props.state.ori)}\n                  />\n                  </Box>\n                </Paper>\n          </Grid>\n        </Grid>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12} md={10} lg={8}>\n            <SelectorGroupPanel selector={ config.cmllSelector } handleChange= {handleSelectorChange(\"cmllSelector\")} />\n          </Grid>\n          <Grid item xs={12} md={10} lg={8}>\n            <SelectorGroupPanel selector={ config.triggerSelector } handleChange= {handleSelectorChange(\"triggerSelector\")} />\n          </Grid>\n          <Grid item xs={12} md={10} lg={8}>\n            <SelectorGroupPanel selector={ config.orientationSelector } handleChange= {handleSelectorChange(\"orientationSelector\")} />\n          </Grid>\n        </Grid>\n\n      </Container>\n\n    </main>\n  )\n}\nexport default AppView","// source: \"https://sites.google.com/view/kianroux/cmll\" and https://github.com/AshleyF/briefcubing/blob/master/algs.js\n\n//type oll_case = \"o\"|\"h\"|\"pi\"|\"u\"|\"t\"|\"s\"|\"as\"|\"l\"\n\nimport { Selector } from \"./Types\";\nimport { triggerAsyncId } from \"async_hooks\";\n\nconst get_active_names = (sel : Selector) => {\n    let res = []\n    for (let i = 0; i < sel.names.length; i++) {\n        if (sel.flags[i]) {\n            res.push(sel.names[i]);\n        }\n    }\n    return res\n}\n\nexport type AlgDesc = {\n    id: string,\n    alg: string,\n    kind: string\n}\n\nconst empty_alg : AlgDesc = {\n    id: \"empty\",\n    alg: \"\",\n    kind: \"any\"\n}\n\nconst cmll_algs : AlgDesc[] = [\n    { id: \"o_adjacent_swap\", alg: \"R U R' F' R U R' U' R' F R2 U' R'\", kind: \"cmll\" },\n    { id: \"o_diagonal_swap\", alg: \"r2 D r' U r D' R2 U' F' U' F\", kind: \"cmll\" },\n    { id: \"h_columns\", alg: \"R U R' U R U' R' U R U2 R'\", kind: \"cmll\" },\n    { id: \"h_rows\", alg: \"F R U R' U' R U R' U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"h_column\", alg: \"U R U2' R2' F R F' U2 R' F R F'\", kind: \"cmll\" },\n    { id: \"h_row\", alg: \"r U' r2' D' r U' r' D r2 U r'\", kind: \"cmll\" },\n    { id: \"pi_right_bar\", alg: \"F R U R' U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"pi_back_slash\", alg: \"U F R' F' R U2 R U' R' U R U2' R'\", kind: \"cmll\" },\n    { id: \"pi_x_checkerboard\", alg: \"U' R' F R U F U' R U R' U' F'\", kind: \"cmll\" },\n    { id: \"pi_forward_slash\", alg: \"R U2 R' U' R U R' U2' R' F R F'\", kind: \"cmll\" },\n    { id: \"pi_columns\", alg: \"U' r U' r2' D' r U r' D r2 U r'\", kind: \"cmll\" },\n    { id: \"pi_left_bar\", alg: \"U' R' U' R' F R F' R U' R' U2 R\", kind: \"cmll\" },\n    { id: \"u_forward_slash\", alg: \"U2 R2 D R' U2 R D' R' U2 R'\", kind: \"cmll\" },\n    { id: \"u_back_slash\", alg: \"R2' D' R U2 R' D R U2 R\", kind: \"cmll\" },\n    { id: \"u_front_row\", alg: \"R2' F U' F U F2 R2 U' R' F R\", kind: \"cmll\" },\n    { id: \"u_rows\", alg: \"U' F R2 D R' U R D' R2' U' F'\", kind: \"cmll\" },\n    { id: \"u_x_checkerboard\", alg: \"U2 r U' r' U r' D' r U' r' D r\", kind: \"cmll\" },\n    { id: \"u_back_row\", alg: \"U' F R U R' U' F'\", kind: \"cmll\" },\n    { id: \"t_left_bar\", alg: \"U' R U R' U' R' F R F'\", kind: \"cmll\" },\n    { id: \"t_right_bar\", alg: \"U L' U' L U L F' L' F\", kind: \"cmll\" },\n    { id: \"t_rows\", alg: \"F R' F R2 U' R' U' R U R' F2\", kind: \"cmll\" },\n    { id: \"t_front_row\", alg: \"r' U r U2' R2' F R F' R\", kind: \"cmll\" },\n    { id: \"t_back_row\", alg: \"r' D' r U r' D r U' r U r'\", kind: \"cmll\" },\n    { id: \"t_columns\", alg: \"U2 r2' D' r U r' D r2 U' r' U' r\", kind: \"cmll\" },\n    { id: \"s_left_bar\", alg: \"U R U R' U R U2 R'\", kind: \"cmll\" },\n    { id: \"s_x_checkerboard\", alg: \"U L' U2 L U2' L F' L' F\", kind: \"cmll\" },\n    { id: \"s_forward_slash\", alg: \"U F R' F' R U2 R U2' R'\", kind: \"cmll\" },\n    { id: \"s_Columns\", alg: \"U2 R' U' R U' R2' F' R U R U' R' F U2' R\", kind: \"cmll\" },\n    { id: \"s_right_bar\", alg: \"U' R U R' U R' F R F' R U2' R'\", kind: \"cmll\" },\n    { id: \"s_back_slash\", alg: \"U R U' L' U R' U' L\", kind: \"cmll\" },\n    { id: \"as_right_bar\", alg: \"U R' U' R U' R' U2' R\", kind: \"cmll\" },\n    { id: \"as_columns\", alg: \"U' R2 D R' U R D' R' U R' U' R U' R'\", kind: \"cmll\" },\n    { id: \"as_back_slash\", alg: \"U' F' L F L' U2' L' U2 L\", kind: \"cmll\" },\n    { id: \"as_x_checkerboard\", alg: \"U' R U2' R' U2 R' F R F'\", kind: \"cmll\" },\n    { id: \"as_forward_slash\", alg: \"U' L' U R U' L U R'\", kind: \"cmll\" },\n    { id: \"as_left_bar\", alg: \"R' U' R U' L U' R' U L' U2 R\", kind: \"cmll\" },\n    { id: \"l_mirror\", alg: \"F R U' R' U' R U R' F'\", kind: \"cmll\" },\n    { id: \"l_inverse\", alg: \"F R' F' R U R U' R'\", kind: \"cmll\" },\n    { id: \"l_pure\", alg: \"R U2 R' U' R U R' U' R U R' U' R U' R'\", kind: \"cmll\" },\n    { id: \"l_front_commutator\", alg: \"R U2 R D R' U2 R D' R2'\", kind: \"cmll\" },\n    { id: \"l_diag\", alg: \"R' U' R U R' F' R U R' U' R' F R2\", kind: \"cmll\" },\n    { id: \"l_back_commutator\", alg: \"U R' U2 R' D' R U2 R' D R2\", kind: \"cmll\" }\n]\n\nlet triggerAlgs: AlgDesc[] = [\n    { id: \"RUR'_1\", alg: \"R U R'\", kind:\"trigger\"},\n    { id: \"RUR'_2\", alg: \"r U r'\", kind:\"trigger\"},\n    { id: \"RU'R'-1\", alg: \"R U' R'\", kind:\"trigger\"},\n    { id: \"RU'R'-2\", alg: \"r U' r'\", kind:\"trigger\"},\n    { id: \"R'U'R_1\", alg: \"R' U' R\", kind:\"trigger\"},\n    { id: \"R'U'R_2\", alg: \"r' U' r\", kind:\"trigger\"},\n    { id: \"R'UR_1\", alg: \"R' U R\", kind:\"trigger\"},\n    { id: \"R'UR_2\", alg: \"r' U r\", kind:\"trigger\"}\n]\n\nlet oriAlgs: AlgDesc[] =\n[\"WG\", \"WB\", \"WO\", \"WR\",\n\"YG\", \"YB\", \"YO\", \"YR\",\n\"BW\", \"BY\", \"BO\", \"BR\",\n\"GW\", \"GY\", \"GO\", \"GR\",\n\"OW\", \"OY\", \"OB\", \"OG\",\n\"RW\", \"RY\", \"RB\", \"RG\"].map(s => ({id: s, alg: \"\", kind:\"orientation\" }))\n\nlet get_algset = (kind : string) => {\n    switch (kind) {\n        case \"cmll\": return cmll_algs;\n        case \"trigger\": return triggerAlgs;\n        case \"orientation\": return oriAlgs;\n        default: return []\n    }\n}\n\nlet alg_generator = (selector: Selector) => {\n    let algSet = get_algset(selector.kind)\n    let lookup = new Set(get_active_names(selector))\n    let get_prefix = (id: string) => {\n        let s = \"\"\n        for (let i = 0, l = id.length; i < l; i++) {\n            if (id[i] === \"_\") break;\n            s += id[i]\n        }\n        return s\n    }\n    let algs : AlgDesc[] = (() => {\n        if (selector.flags.every(x => x)) {\n            return algSet\n        } else {\n            return algSet.filter(alg => {\n                let prefix = get_prefix(alg.id);\n                return lookup.has(prefix)\n            })\n        }\n    })()\n\n    let next = () => {\n        if (algs.length === 0) {\n            return empty_alg\n        } else {\n            let idx = Math.floor( Math.random() * algs.length )\n            return algs[idx]\n        }\n    }\n    return next\n}\n\nexport { alg_generator}","\n// Hook\nimport React from 'react';\nimport { Config, AppState, AppStateOpt, StateT, InfoT } from './Types';\nimport { CubieCube } from './CubeLib';\nimport { MoveT } from './Defs';\nimport { string } from 'prop-types';\nimport { alg_generator } from './Algs';\n\nfunction useKeyControl(keyMapping: {[key: string]: string} ) {\n    // State for keeping track of whether key is pressed\n    const [move, setMove] = React.useState<[string, number]>( [\"\", 0] );\n    // If pressed key is our target key then set to true\n    function downHandler({ key }: { key : string}) {\n      key = key.toUpperCase()\n      //console.log(key)\n      if (keyMapping.hasOwnProperty(key)) {\n        setMove( ([_, cnt]) => [keyMapping[key], cnt + 1] );\n      }\n      //console.log(\"triigered setmove\")\n    }\n    // Add event listeners\n    React.useEffect(() => {\n      window.addEventListener('keydown', downHandler);\n      // Remove event listeners on cleanup\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n    return move;\n}\n\nfunction useLS<T>(key:string, defaultValue: T) {\n    const [storedValue, setStoredValue] = React.useState(() => {\n        try {\n            const item = window.localStorage.getItem(key);\n            const item1 = item ? JSON.parse(item) : defaultValue;\n            if ( (item1 === null) || (item1 === undefined) || Object.keys(item1).length === 0) {\n                return defaultValue\n            } else {\n                return item1\n            }\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return defaultValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value: T) => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    }\n\n    return [storedValue, setValue];\n}\n\nlet arr_ori_flag = Array(24).fill(0)\narr_ori_flag[0] = 1\n\nconst initialConfig : Config = {\n    cmllSelector: {\n        names: [\"o\", \"s\", \"as\", \"t\", \"l\", \"u\", \"pi\", \"h\"],\n        flags: [1, 1, 1, 1, 1, 1, 1, 1],\n        kind: \"cmll\"\n    },\n    triggerSelector: {\n        names: [\"RUR'\", \"RU'R'\", \"R'U'R\", \"R'UR\"],\n        flags: [1,1,1,1],\n        kind: \"trigger\"\n    },\n    orientationSelector: {\n        names: [\n            \"WG\", \"WB\", \"WO\", \"WR\",\n            \"YG\", \"YB\", \"YO\", \"YR\",\n            \"BW\", \"BY\", \"BO\", \"BR\",\n            \"GW\", \"GY\", \"GO\", \"GR\",\n            \"OW\", \"OY\", \"OB\", \"OG\",\n            \"RW\", \"RY\", \"RB\", \"RG\",\n        ],\n        flags: arr_ori_flag,\n        kind: \"orientation\"\n    }\n}\n\nconst initialStateName : StateT = \"solving\"\n\nconst initialInfo = {\n    cube: CubieCube.id,\n    desc: [],\n}\n/*\nexport type Selector = {\n    names: string[],\n    flags: number[],\n    kind: string\n}\n\nexport type Config = {\n    cmll_selector: Selector\n}\n\nexport type AppState = {\n    config: Config,\n    stateName: \"\",\n    cube: CubieT,\n    moveHistory: MoveT[],\n}\n*/\nfunction useAppState() : [AppState, (x: AppStateOpt | AppState) => void] {\n    const [config, setConfig] = useLS(\"config\", initialConfig)\n    const [stateName, setStateName] = React.useState<StateT>(initialStateName)\n    const [cube, setCube] = React.useState(CubieCube.id)\n    const [info, setInfo] = React.useState<InfoT>(initialInfo)\n\n    // ori is a derived state. we need to make these things automatic in the future\n    let ori_generator = alg_generator( config.orientationSelector)\n    let ori_init = ori_generator().id\n    ori_init = (ori_init === \"empty\") ? \"WG\" : ori_init\n\n    const [ori, setOri] = React.useState<string>(ori_init)\n    const [moveHistory, setMoveHistory] = React.useState<MoveT[]>([])\n\n    const state : AppState = {\n        config, stateName, cube, moveHistory, info, ori\n    }\n    const setState = (newState : AppStateOpt | AppState) => {\n        let {\n            config: config_,\n            stateName: stateName_,\n            cube: cube_,\n            moveHistory: moveHistory_,\n            info: info_,\n            ori: ori_\n        } = newState\n        if (config_)\n            setConfig(config_)\n        if (stateName_)\n            setStateName(stateName_)\n        if (cube_)\n            setCube(cube_)\n        if (moveHistory_)\n            setMoveHistory(moveHistory_)\n        if (info_)\n            setInfo(info_)\n        if (ori_)\n            setOri(ori_)\n        return\n    }\n\n    return [state, setState]\n}\n\nexport { useKeyControl, useLS, useAppState }","import React, { useEffect } from 'react'\nimport CubeSim from './CubeSim'\nimport { FaceletCube, CubieCube, Move, CubeUtil } from './CubeLib';\nimport { CubieT, MoveT, defaultKeyMapping } from \"./Defs\";\nimport AppView from \"./AppView\"\nimport { AppState, StateT } from \"./Types\"\nimport { useKeyControl, useAppState } from \"./Hooks\"\nimport { alg_generator, AlgDesc } from \"./Algs\"\nimport { rand_choice } from './Math';\n\n\ntype AppProps = {}\n\nfunction App(props: AppProps) {\n  let [state, setState] = useAppState()\n  let keyMove = useKeyControl(defaultKeyMapping)\n\n  let generator = alg_generator( state.config.cmllSelector )\n  let trig_generator = alg_generator( state.config.triggerSelector )\n\n  //console.log(\"current selector = \", state.config.orientationSelector)\n  let ori_generator = alg_generator( state.config.orientationSelector)\n\n  useEffect( () => {\n    let [move_str, _] = keyMove\n    if (move_str === \"\") return;\n    // case match on kind of operation\n    if (move_str[0] === \"#\") {\n      if (move_str === \"#scramble\") {\n        // enter cleared solving state based on selection\n        let trigger_alg : AlgDesc = trig_generator()\n\n        let alg : AlgDesc = generator();\n\n        let alg_str = trigger_alg.alg + \" \" + rand_choice([\"U\", \"\", \"U'\", \"U2\"]) + \" \" + alg.alg\n        let moves : MoveT[] = Move.inv(Move.parse(alg_str));\n\n        //console.log(\"moves\", Move.to_string(moves))\n\n        let cube = CubeUtil.get_random_l10p()\n        cube = CubieCube.apply(cube, moves)\n\n        // ori based on ...?\n        let ori : string = ori_generator().id\n        //console.log(\"current ori selector's ori \", ori)\n\n        setState( {\n          cube,\n          moveHistory: [],\n          stateName: \"solving\",\n          info: {\n            cube,\n            desc: [trigger_alg, alg]\n          },\n          ori\n        })\n      } else if (move_str === \"#redo\") {\n        setState( {\n          cube: state.info.cube,\n          moveHistory: [],\n          stateName: \"solving\",\n        })\n      }\n    } else { // move\n      // only allow this in solving state\n      if (state.stateName === \"solving\") {\n        //console.log(move_str)\n        let moves = Move.parse(move_str)\n        if (moves.length > 0) {\n          let move = moves[0]\n          let cube = CubieCube.apply(state.cube, move)\n          let cmll_solved = CubeUtil.is_cmll_solved(cube)\n          let newState : StateT = cmll_solved ? \"solved\" : \"solving\";\n          setState( {\n            cube: CubieCube.apply(state.cube, move),\n            moveHistory: [...state.moveHistory, move],\n            stateName: newState\n          })\n        }\n      }\n    }\n  }, [keyMove])\n\n  let {cube} = state\n\n  let facelet = FaceletCube.from_cubie(cube)\n\n  return (\n    <AppView state={state} setState={setState} />\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}